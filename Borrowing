
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javafx.scene.control.Alert;

class Borrowing implements Serializable {
    private static final long serialVersionUID = 7658793135987417738L;
    
    public static List<Borrowing> borrowingsList = new ArrayList<>();
    public static List<Book>borrowedBooks=new ArrayList<>(); // each user has his own borrowedBooks
    private List<Book> borrowedBooksPerBorrowing=new ArrayList<>();
    private static HashMap<String, Integer> borrowCount = new HashMap<>();// isbn w count
    private static HashMap<String, Double> bookRevenueMap = new HashMap<>();// isbn w price
    private static HashMap<User, Double> borrowerRevenueMap = new HashMap<>();// isbn w revenue
    private static HashMap<User, Double> librarianRevenueMap = new HashMap<>();// borrower w price
    private User user;
    private Date startDate;
    private Date endDate;
    private double payment;
    private double rating;
    Calendar calendar;    // to set the end date to be after 2 weeks of start date
    
    public Borrowing(){}
    public Borrowing(User user) {
        if (user instanceof Borrower || user instanceof Librarian) {
            this.user = user;
        } else {
            throw new IllegalArgumentException("Invalid user type for borrowing");
        }
    }
    public User getUser() {
        return user;
    }
    public void setUser(User user) {
        this.user = user;
    }
    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public Date getEndDate(Date start) {
        calendar = Calendar.getInstance();
        calendar.setTime(start);
        calendar.add(Calendar.WEEK_OF_YEAR, 2); // after 2 weeks of borrowing
        endDate = calendar.getTime();
        return endDate;
    }

    public double getPayment() {
        return payment;
    }

    public void setPayment(double payment) {
        this.payment = payment;
    }

    public double getRating() {
        return rating;
    }

    public void setRating(double rating) {
        this.rating = rating;
    }

    public List<Book> getBorrowedBooksPerBorrowing() {
        return borrowedBooksPerBorrowing;
    }

    public void setBorrowedBooksPerBorrowing(List<Book> borrowedBooksPerBorrowing) {
        this.borrowedBooksPerBorrowing = borrowedBooksPerBorrowing;
    }
    
    public static void setBorrowCount() {
        borrowCount.clear();
        if(borrowedBooks.isEmpty())
        {
          Borrowing.borrowedBooks=Files.readObjectsFromFile("borrowedBooks.bin"); 
        }
        for (Book b : borrowedBooks) {
            String isbn = b.getISBN();
            if (borrowCount.containsKey(isbn)) {
                int count = borrowCount.get(isbn);
                borrowCount.put(isbn, count + 1);
            } else {
                borrowCount.put(isbn, 1);
            }
        }
    }
  
 public static void setBookRevenueMap() {
        bookRevenueMap.clear();
        if (borrowedBooks.isEmpty()) {
            Borrowing.borrowedBooks = Files.readObjectsFromFile("borrowedBooks.bin");
        }
        for (Book b : borrowedBooks) {
            String isbn = b.getISBN();
            double bookPrice = b.getPrice();
            if (bookRevenueMap.containsKey(isbn)) {
                double currentRevenue = bookRevenueMap.get(isbn);
                bookRevenueMap.put(isbn, currentRevenue + bookPrice);
            } else {
                bookRevenueMap.put(isbn, bookPrice);
            }
        }
    }

public static void setBorrowerRevenueMap() {
    borrowerRevenueMap.clear();
    for (Borrowing borrowing : borrowingsList) {
        User user = borrowing.getUser();
        if (user instanceof Borrower) {
            Double revenue = borrowerRevenueMap.get(user);

            if (revenue == null) {
                revenue = 0.0;
            }

            for (Book book : Borrowing.borrowedBooks) { 
                double bookPrice = book.getPrice();
                revenue += bookPrice;
            }

            borrowerRevenueMap.put(user, revenue);
        }
    }
}

public static void setLibrarianRevenueMap() {
    librarianRevenueMap.clear();
    for (Borrowing borrowing : borrowingsList) {
        User user = borrowing.getUser();
        if (user instanceof Librarian) {
            Double revenue = librarianRevenueMap.get(user);

            if (revenue == null) {
                revenue = 0.0;
            }

            for (Book book : Borrowing.borrowedBooks) { 
                double bookPrice = book.getPrice();
                revenue += bookPrice;
            }

            librarianRevenueMap.put(user, revenue);
        }
    }
}

 public double calculateRevenue() {
        double revenue = 0.0;
        for (Book book : borrowedBooks) {
            double bookPrice = book.getPrice();
            revenue += bookPrice;
        }
        return revenue;
    }
    
//public void createBorrowing(Date startDate, Borrower borrower, List<Book> borrowedBooks, double totalPrice) {
//    Borrowing newBorrowing = new Borrowing( borrower);
//    newBorrowing.startDate = startDate;
//    newBorrowing.endDate = newBorrowing.getEndDate(startDate);
//    setBorrowCount(borrowedBooks);
//    //check quntity for each book
//    for (Book book : borrowedBooks) {
//        if (book.getQuantity() > 0) {
//            book.setQuantity(book.getQuantity() - 1);
//            totalPrice = this.totalBorrowingPrice(borrowedBooks);
//            newBorrowing.payment = totalPrice;        
//            //Dialogs.showAlert("The book " + book.getTitle() + " added to your borrowings list.", Alert.AlertType.INFORMATION);
//            //Dialogs.showAlert("Borrowing successful!\nThe End Date of your borrowing will be in:-\n " +newBorrowing.getEndDate(startDate),Alert.AlertType.INFORMATION);   
//        } else {
//            //Dialogs.showAlert("Book not available for borrowing: " + book.getTitle(), Alert.AlertType.WARNING);
//        }
//    }
//    Borrowing.borrowingsList.add(newBorrowing);
//} 
 public boolean createBorrowing(Date startDate, User user, List<Book> borrowedBooks, double totalPrice) { //mot static to access booksPerBorrowing
    Borrowing newBorrowing = new Borrowing(user);
    newBorrowing.startDate = startDate;
    newBorrowing.endDate = newBorrowing.getEndDate(startDate);
    List<Book>booksPerBorrowing=new ArrayList<>();
    for (Book book : borrowedBooks) {
        if (book.getQuantity() > 0) {
            book.setQuantity(book.getQuantity() - 1);
            totalPrice =totalBorrowingPrice(Borrowing.borrowedBooks);
            newBorrowing.payment = totalPrice;
            Borrowing.borrowedBooks.add(book);
            booksPerBorrowing.add(book);
        } else {
            return false; // Stop creating new borrowings if a book is not available(Quantity= 0)
        }
    }

    // Update borrowed books list for the user
    if (user instanceof Borrower) {
         setBorrowerRevenueMap();
        ((Borrower) user).setBorrowedBooksperBorrower(Borrowing.borrowedBooks);
    } else if (user instanceof Librarian) {
        setLibrarianRevenueMap();
        ((Librarian) user).setBorrowedBooksperLibrarian(Borrowing.borrowedBooks);
    }

    borrowingsList.add(newBorrowing);
    setBorrowCount(); // Update the borrow count for all borrowed books
    setBookRevenueMap();
    setBorrowedBooksPerBorrowing(booksPerBorrowing);
    return true;
   
    }
public static boolean cancelBorrowing(Borrowing borrowing) {
    User user = borrowing.getUser();
    List<Book> borrowedbooks = borrowing.getBorrowedBooksPerBorrowing(); 

    // Remove borrowed books from the user
    if (user instanceof Borrower) {
        ((Borrower) user).getBorrowedBooksperBorrower().removeAll(borrowedbooks);
    } else if (user instanceof Librarian) {
        ((Librarian) user).getBorrowedBooksperLibrarian().removeAll(borrowedbooks);
    }

    // Update book quantities
    for (Book book : borrowedbooks) {
        book.setQuantity(book.getQuantity() + 1);
    }

    // Remove the borrowing from the borrowingsList
    borrowingsList.remove(borrowing);

    // Update revenue maps and counts
    if (user instanceof Borrower) {
        setBorrowerRevenueMap();
    } else if (user instanceof Librarian) {
        setLibrarianRevenueMap();
    }
    setBookRevenueMap();
    setBorrowCount();

    return true;
}

 
public static Borrowing findBorrowing(String librarianName, String booksString) {
    for (Borrowing borrowing : Borrowing.borrowingsList) {
        if (borrowing.getUser().getUserName().equals(librarianName)
                && borrowing.getBorrowedBooksAsString().equals(booksString)) {
            return borrowing;
        }
    }
    return null; 
}
public String getBorrowedBooksAsString() {
        StringBuilder result = new StringBuilder();
        for (Book book : borrowedBooks) {
            result.append(book.getTitle()).append(",");
        }
        if (result.length() > 0) {
            result.deleteCharAt(result.length() - 1);
        }
        return result.toString();
    }

public static List<String> getAllBorrowingDetails() {
    List<String> detailsList = new ArrayList<>();

    if (borrowingsList.isEmpty()) {
        detailsList.add("No borrowings available.");
        return detailsList;
    }

    for (Borrowing borrowing : borrowingsList) {
        detailsList.add("Borrowing Details:");
        detailsList.add("User: " + borrowing.getUser().getUserName());
        detailsList.add("Start Date: " + borrowing.getStartDate());
        detailsList.add("End Date: " + borrowing.getEndDate(borrowing.getStartDate()));
        detailsList.add("Payment: " + borrowing.getPayment());
        detailsList.add("Rating: " + borrowing.getRating());
        if(borrowedBooks.isEmpty()){
        Borrowing.borrowedBooks=Files.readObjectsFromFile("borrowedBooks.bin"); }
        detailsList.add("Borrowed Books:");
        for (Book book : borrowedBooks) {
            detailsList.add("- ISBN: " + book.getISBN() + ", Title: " + book.getTitle() + ", Price: " + book.getPrice());
        }

        detailsList.add("------------------------------");
    }

    return detailsList;
}

public double totalBorrowingPrice(List<Book> borrowed) {
    double price = 0.0;
    for (Book bor : borrowed) {
        price += bor.getPrice();
    }
    return price;
}
public static double totalBorrowingRevInPeriod(String startDateStr, String endDateStr) {
    try {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date startDate = dateFormat.parse(startDateStr);
        Date endDate = dateFormat.parse(endDateStr);

        double totalRevenue = 0.0;

        for (Borrowing borrowing : borrowingsList) {
            Date borrowingStartDate = borrowing.getStartDate();
            Date borrowingEndDate = borrowing.getEndDate(borrowingStartDate);

            if (startDate.before(borrowingEndDate) && endDate.after(borrowingStartDate)) {
                totalRevenue += borrowing.calculateRevenue();
            }
        }

        return totalRevenue;
    } catch (ParseException e) {
        Dialogs.showAlert("Date format is incorrect", Alert.AlertType.ERROR);
        return 0.0;
    }
}

public static double averageBorrowingRevenueInPeriod(String startDateStr, String endDateStr) {
    try {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date startDate = dateFormat.parse(startDateStr);
        Date endDate = dateFormat.parse(endDateStr);

        double totalRevenue = 0.0;
        int borrowingCount = 0;

        for (Borrowing borrowing : borrowingsList) {
            Date borrowingStartDate = borrowing.getStartDate();
            Date borrowingEndDate = borrowing.getEndDate(borrowingStartDate);

            if (startDate.before(borrowingEndDate) && endDate.after(borrowingStartDate)) {
                totalRevenue += borrowing.calculateRevenue();
                borrowingCount++;
            }
        }

        if (borrowingCount > 0) {
            return totalRevenue / borrowingCount;
        } else {
            return 0.0; // To avoid division by zero
        }
    } catch (ParseException e) {
        Dialogs.showAlert("Date format is incorrect", Alert.AlertType.ERROR);
        return 0.0;
    }
}


public static int NoOfBorrowsInPeriod(String startDateStr, String endDateStr) {
    try {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date startDate = dateFormat.parse(startDateStr);
        Date endDate = dateFormat.parse(endDateStr);

        int count = 0;
        for (Borrowing borrowing : borrowingsList) {
            Date borrowingStartDate = borrowing.getStartDate();
            Date borrowingEndDate = borrowing.getEndDate(borrowingStartDate);

            if (startDate.before(borrowingEndDate) && endDate.after(borrowingStartDate)) {
                count++;
            }
        }
        return count;
    } catch (ParseException e) {
        Dialogs.showAlert("Date format is incorrect", Alert.AlertType.ERROR);
        return 0;
    }
}
//****make it return list<Book> in UML*****//
public static List<String> mostBorrowedBooksInPeriod(String startDateStr, String endDateStr) {
    List<Book> books = Files.readObjectsFromFile("book.bin");
    List<String> result = new ArrayList<>();

    if (books == null || books.isEmpty()) {
        System.out.println("No books available.");
        return Collections.emptyList();
    }   
    // Initialize borrowCount map
    Borrowing.setBorrowCount();
    try {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date startDate = dateFormat.parse(startDateStr);
        Date endDate = dateFormat.parse(endDateStr);

        int maxCount = 0;

        for (Borrowing borrowing : borrowingsList) {
            Date borrowingStartDate = borrowing.getStartDate();
            Date borrowingEndDate = borrowing.getEndDate(borrowingStartDate);

            if (startDate.before(borrowingEndDate) && endDate.after(borrowingStartDate)) {
                maxCount = Collections.max(borrowCount.values());
            }
        }

        // convert list of book to list of string just for showListDialog(List<String>)
        for (Map.Entry<String, Integer> entry : borrowCount.entrySet()) {
            if (entry.getValue() == maxCount) {
                Book foundBook = Book.findBookByISBN(books, entry.getKey());
                if (foundBook != null) {
                    result.add(foundBook.toString());
                } else {
                    System.out.println("Cannot find book with ISBN: " + entry.getKey());
                }
            }
        }

        return result;
    } catch (ParseException e) {
        Dialogs.showAlert("Date format is incorrect", Alert.AlertType.ERROR);
        return null;
    }
}

public static List<String> mostRevenueBooksInPeriod(String startDateStr, String endDateStr) {
    List<Book> books = Files.readObjectsFromFile("book.bin");
    List<String> result = new ArrayList<>();
    if (books == null || books.isEmpty()) {
        System.out.println("No books available.");
        return Collections.emptyList();
    }
    try {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date startDate = dateFormat.parse(startDateStr);
        Date endDate = dateFormat.parse(endDateStr);
        setBookRevenueMap();
        for (Borrowing borrowing : borrowingsList) {
            Date borrowingStartDate = borrowing.getStartDate();
            Date borrowingEndDate = borrowing.getEndDate(borrowingStartDate);

            if (startDate.before(borrowingEndDate) && endDate.after(borrowingStartDate)) {
                List<Book> borrowed = Borrowing.borrowedBooks;

                for (Book book : borrowed) {
                    double currentRevenue = bookRevenueMap.getOrDefault(book.getISBN(), 0.0);
                    currentRevenue += book.getPrice();
                    bookRevenueMap.put(book.getISBN(), currentRevenue);
                }
            }
        }

        if (bookRevenueMap.isEmpty()) {
            System.out.println("No revenue recorded for the specified period.");
            return Collections.emptyList();
        }

        // Find the book with the maximum revenue
        String mostRevenueBookISBN = Collections.max(bookRevenueMap.entrySet(), Map.Entry.comparingByValue()).getKey();
        Book mostRevenueBook = Book.findBookByISBN(books, mostRevenueBookISBN);

        if (mostRevenueBook != null) {
            double maxRevenue = bookRevenueMap.get(mostRevenueBookISBN);
            result.add("Most Revenue Book: " + mostRevenueBook.toString());
            result.add("Revenue: " + maxRevenue);
        } else {
            System.out.println("Cannot find the most revenue book.");
        }

        return result;
    } catch (ParseException e) {
        Dialogs.showAlert("Date format is incorrect", Alert.AlertType.ERROR);
        return Collections.emptyList();
    }
}

public static Borrower maxBorrowerBorrowings() {
    Map<Borrower, Long> borrowerBorrowingsCount = borrowingsList.stream()
            .filter(borrowing -> borrowing.getUser() instanceof Borrower)
            .collect(Collectors.groupingBy(borrowing -> (Borrower) borrowing.getUser(), Collectors.counting()));

    return Collections.max(borrowerBorrowingsCount.entrySet(), Comparator.comparing(Map.Entry::getValue))
            .getKey();
}


public static Librarian maxLibrarianBorrowings() {
    Map<Librarian, Long> librarianBorrowingsCount = borrowingsList.stream()
            .filter(borrowing -> borrowing.getUser() instanceof Librarian)
            .collect(Collectors.groupingBy(borrowing -> (Librarian) borrowing.getUser(), Collectors.counting()));

    return Collections.max(librarianBorrowingsCount.entrySet(), Comparator.comparing(Map.Entry::getValue))
            .getKey();
}
public static Map<String, Double> getBorrowerRevenueMap() {
    Map<String, Double> result = new HashMap<>();

    for (Borrowing borrowing : borrowingsList) {
        User user = borrowing.getUser();
        if (user instanceof Borrower) {
            Double revenue = result.get(user.getUserName());
            if (revenue == null) {
                revenue = 0.0;
            }

            for (Book book : Borrowing.borrowedBooks) {
                double bookPrice = book.getPrice();
                revenue += bookPrice;
            }

            result.put(user.getUserName(), revenue);
        }
    }

    return result;
}

public static Map<String, Double> getLibrarianRevenueMap() {
    Map<String, Double> result = new HashMap<>();

    for (Borrowing borrowing : borrowingsList) {
        User user = borrowing.getUser();
        if (user instanceof Librarian) {
            Double revenue = result.get(user.getUserName());
            if (revenue == null) {
                revenue = 0.0;
            }

            for (Book book : Borrowing.borrowedBooks) {
                double bookPrice = book.getPrice();
                revenue += bookPrice;
            }

            result.put(user.getUserName(), revenue);
        }
    }

    return result;
}
public static List<String> borrowingsPerLibrarianDetails() {
        List<String> result = new ArrayList<>();

        for (User user : User.users) {
            if (user instanceof Librarian) {
                List<Borrowing> librarianBorrowings = filterBorrowingsByUserType(user, borrowingsList);
                int borrowingsCount = librarianBorrowings.size();
                System.out.println(borrowingsCount);
                if (borrowingsCount > 0) {
                    result.add("Librarian: " + user.getUserName() + ", Borrowings Count: " + borrowingsCount);
                    for (Borrowing borrowing : librarianBorrowings) {
                        result.add(borrowing.toString()); 
                    }
                }
            }
        }

        return result;
    }

public static List<String> borrowingsPerBorrowerDetails() {
        List<String> result = new ArrayList<>();

        for (User user : User.users) {
            if (user instanceof Borrower) {
                List<Borrowing> borrowerBorrowings = filterBorrowingsByUserType(user, borrowingsList);
                int borrowingsCount = borrowerBorrowings.size();
                if (borrowingsCount > 0) {
                    result.add("Borrower: " + user.getUserName() + ", Borrowings Count: " + borrowingsCount);
                    for (Borrowing borrowing : borrowerBorrowings) {
                        result.add(borrowing.toString()); 
                    }
                }
            }
        }

        return result;
    }

private static List<Borrowing> filterBorrowingsByUserType(User user, List<Borrowing> borrowings) {
    List<Borrowing> filteredBorrowings = new ArrayList<>();
    for (Borrowing borrowing : borrowings) {
        if (borrowing.getUser().equals(user)) {
            filteredBorrowings.add(borrowing);
        }
    }
    return filteredBorrowings;
}



@Override
public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("User: ").append(user.getUserName()).append("\n");
        stringBuilder.append("Start Date: ").append(formatDate(startDate)).append("\n");
        stringBuilder.append("End Date: ").append(formatDate(endDate)).append("\n");
        stringBuilder.append("Payment: ").append(payment).append("\n");
        stringBuilder.append("Rating: ").append(rating).append("\n");

        return stringBuilder.toString();
    }

private String formatDate(Date date) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.format(date);
    }



}
