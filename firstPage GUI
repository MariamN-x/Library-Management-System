
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class FirstPage extends Application implements Serializable{
   // protected static List<User> users;
    protected Stage primaryStage;
    protected TextField usernameField;
    protected PasswordField passwordField;
    protected PasswordField retypePasswordField;
    protected Button login;
    protected Button signup1;
    protected Button signup2;
    protected ObservableList<String> observableList;
    private User accountObj;
    public Admin adminAccount=new Admin();
    private Dialogs dialog;
    
    public FirstPage()
    {
        this.dialog=new Dialogs();
    }
   
    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;
        primaryStage.setTitle("Library System");
        LoginScene(primaryStage);
        primaryStage.setResizable(false);
        accountObj = new User();
        primaryStage.show();

    }    

    public void setAdminAccount(Admin adminAccount) {
        this.adminAccount = adminAccount;
    }
    
protected boolean Login(String username, String password, Stage primaryStage) {
    accountObj = accountObj.login(User.users, username, password); //call login method in u

    if (accountObj != null) {
        System.out.println("Login successful!");

        User.UserType userType = ((User) accountObj).getUserType();

        switch (userType) {
            case ADMIN:
                primaryStage.setScene(AdminScene());
                break;
            case LIBRARIAN:
                primaryStage.setScene(LibrarianScene());
                break;
            case BORROWER:
                primaryStage.setScene(BorrowerScene());
                break;
        }

        return true;
    }

    return false;
}

protected boolean signup(String username, String password, Stage primaryStage) {
    if (isUsernameExists(username)) {
        showAlert("Signup Failed!\nUsername ALREADY taken", Alert.AlertType.ERROR);
        return false;          
    } else {
            accountObj = new Borrower(username, password);
            accountObj.signUp(User.users, accountObj); // called from user class
            primaryStage.setScene(BorrowerScene());
        }
    //reset fields to be used later
        usernameField.clear();
        passwordField.clear();
        return true;
}

protected boolean isUsernameExists(String username) {
    for (User user : User.users) {
        if (user.getUserName().equals(username)) {
            return true; 
        }
    }
    return false; 
}
//scenes
protected void LoginScene(Stage primaryStage) {
        Image image = new Image("file:ll.png");
        ImageView imageView = new ImageView(image);
        imageView.setFitWidth(primaryStage.getWidth());
        imageView.setFitHeight(primaryStage.getHeight());

        Label usernameLbl1 = new Label("Username  ");
        usernameLbl1.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");
        usernameField = new TextField();
       
        Label passwordLbl = new Label("Password  ");
        passwordLbl.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");
        passwordField = new PasswordField();
       
        login = new Button("Login");
        signup1 = new Button("Sign Up");
        login.setStyle("-fx-font-size: 15px; -fx-background-color: gray; -fx-text-fill: white;");
        signup1.setStyle("-fx-font-size: 15px; -fx-background-color: gray; -fx-text-fill: white;");

        FlowPane root1 = new FlowPane(usernameLbl1, usernameField);
        root1.setAlignment(Pos.CENTER);
        root1.setHgap(10);
        root1.setVgap(5);
        root1.setPadding(new Insets(0, 0, 0, 300));

        FlowPane root2 = new FlowPane(passwordLbl, passwordField);
        root2.setAlignment(Pos.CENTER);
        root2.setHgap(10);
        root2.setVgap(5);
        root2.setPadding(new Insets(20, 0, 0, 300));

        FlowPane root3 = new FlowPane(login, signup1);
        root3.setAlignment(Pos.CENTER);
        root3.setHgap(20);
        root3.setPadding(new Insets(30, 0, 0, 400));

        VBox Root = new VBox();
        Root.setAlignment(Pos.CENTER);
        Root.setSpacing(10);
        Root.getChildren().addAll(root1, root2, root3);
        
        StackPane all = new StackPane(imageView, Root);
        Scene scene = new Scene(all, 1000, 800);
        login.setOnAction(e -> {
           String username = usernameField.getText();
           String password = passwordField.getText();
           if (!Login(username, password, primaryStage))
        showAlert("Invalid username or password!", Alert.AlertType.ERROR);
        });

        signup1.setOnAction(e -> {
           primaryStage.setScene(signUpScene());
});

        primaryStage.setScene(scene);
    }
public Scene signUpScene() {
    Image image = new Image("file:ll.png");
    ImageView imageView = new ImageView(image);

    Label usernameLbl1 = new Label("Username  ");
    usernameLbl1.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");
    usernameField = new TextField();
    Label passwordLbl = new Label("Password  ");
    passwordField = new PasswordField();
    passwordLbl.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");

    Label reTypepasswordLbl = new Label("Re-Type Password");
    retypePasswordField = new PasswordField();
    reTypepasswordLbl.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");

    signup2 = new Button("Sign Up");
    signup2.setStyle("-fx-font-size: 15px; -fx-background-color: gray; -fx-text-fill: white;");

    FlowPane root1 = new FlowPane(usernameLbl1, usernameField);
    root1.setAlignment(Pos.CENTER);
    root1.setHgap(80);
    root1.setPadding(new Insets(0, 0, 0, 300));

    FlowPane root2 = new FlowPane(passwordLbl, passwordField);
    root2.setAlignment(Pos.CENTER);
    root2.setHgap(80);
   // root2.setVgap(5);
    root2.setPadding(new Insets(0, 0, 0, 300));

    FlowPane root3 = new FlowPane(reTypepasswordLbl, retypePasswordField);
    root3.setAlignment(Pos.CENTER);
    root3.setHgap(30);
    root3.setVgap(5);
    root3.setPadding(new Insets(0, 50, 0, 350));

    FlowPane root4 = new FlowPane( signup2);
    root4.setAlignment(Pos.CENTER);
    root4.setHgap(20);
    root4.setPadding(new Insets(20, 0, 0, 460));

    VBox Root = new VBox();
    Root.setAlignment(Pos.CENTER);
    Root.setSpacing(10);
    Root.getChildren().addAll(root1, root2, root3, root4);
    StackPane all = new StackPane(imageView, Root);
    Scene scene = new Scene(all, 1000, 800);
    signup2.setOnAction(e -> {
        String username = usernameField.getText();
        String password = passwordField.getText();
        signup(username,password,primaryStage);
    
    });

    return scene;
}

private Scene AdminScene() {   
    //icons
    GridPane grid = new GridPane();
    grid.setAlignment(Pos.TOP_LEFT);
    grid.setHgap(10); 
    Image image1 = new Image("file:addUser.png");
    ImageView imageView1 = new ImageView(image1);
    imageView1.setFitWidth(150);
    imageView1.setFitHeight(150);

    Image image2=new Image("file:editUser1.png");
    ImageView imageView2 = new ImageView(image2);
    imageView2.setFitWidth(150);
    imageView2.setFitHeight(150);
    
    Image image3=new Image("file:removeUser.png");
    ImageView imageView3 = new ImageView(image3);
    imageView3.setFitWidth(150);
    imageView3.setFitHeight(150);
    
    Image image4=new Image("file:ListUser.png");
    ImageView imageView4 = new ImageView(image4);
    imageView4.setFitWidth(150);
    imageView4.setFitHeight(150);
    
    Image image5=new Image("file:add_book.png");
    ImageView imageView5 = new ImageView(image5);
    imageView5.setFitWidth(120);
    imageView5.setFitHeight(120);
    
    Image image6=new Image("file:edit_book.png");
    ImageView imageView6 = new ImageView(image6);
    imageView6.setFitWidth(100);
    imageView6.setFitHeight(100);
    
    Image image7=new Image("file:icons8-remove-book-100.png");
    ImageView imageView7 = new ImageView(image7);
    imageView7.setFitWidth(120);
    imageView7.setFitHeight(120);
    
    Image image8=new Image("file:list_book.png");
    ImageView imageView8 = new ImageView(image8);
    imageView8.setFitWidth(120);
    imageView8.setFitHeight(120);
    
//add
Label addLbl = new Label("\tAdd User");
addLbl.setStyle("-fx-font-size: 12px; -fx-text-fill: white;");
ObservableList<String> addOptions = FXCollections.observableArrayList("Add Admin", "Add Librarian", "Add Borrower");
ComboBox<String>combo1 = new ComboBox<>(addOptions);
combo1.setStyle("-fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px;-fx-pref-height: 30px;");
combo1.setOnAction(e -> {
    String selectedItem = combo1.getSelectionModel().getSelectedItem();
    if (selectedItem != null) {
        User.UserType userType = getUserTypeFromSelectedItem(selectedItem);
        dialog.showAddUserDialog(userType);
    }
});
//add book
    Button addBookButton = new Button("Add Book");
    addBookButton.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    addBookButton.setOnAction(e -> dialog.showBookDialog(true));

//edit user
    Button editUserButton = new Button("Edit User");
    editUserButton.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    editUserButton.setOnAction(e -> dialog.showEditUserDialog());
    //book
    Button editBookButton = new Button("Edit Book");
    editBookButton.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    editBookButton.setOnAction(e -> dialog.showBookDialog(false));

//remove user   
    Button removeUserButton = new Button("Remove User");
    removeUserButton.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    removeUserButton.setOnAction(e -> dialog.showRemoveUserDialog());
    //book
    Button removeBookButton = new Button("Remove Book");
    removeBookButton.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    removeBookButton.setOnAction(e -> dialog.showRemoveBookDialog());

//list user
    Label listLbl = new Label("\t\tList");
    listLbl.setStyle("-fx-font-size: 12px; -fx-text-fill: white;");
    ObservableList<String> listOptions = FXCollections.observableArrayList(
    "List by Usernames", "List by Passwords", "List by User Type", "List ALL");
    ComboBox<String> combo2 = new ComboBox<>(listOptions);
    combo2.setStyle("-fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px;-fx-pref-height: 30px;");

    combo2.setOnAction(e -> {
    List<String> use = new ArrayList<>();
    User user=new Admin();
    String selectedItem2 = combo2.getSelectionModel().getSelectedItem();
    if (selectedItem2 != null) {
        switch (selectedItem2) {
            case "List by Usernames":
                use = user.getUsernames();                
                break;
            case "List by Passwords":
                use = user.getPasswords(); 
                break;
            case "List by User Type":
               use = user.getUserTypes(); 
                break;
            case "List ALL":
                use = user. getAllUsers(); 
                break;
        }
    }
    dialog.showListDialog(use);
});
    //list book
    Label listLbl2 = new Label("\t\tList Books");
    listLbl2.setStyle("-fx-font-size: 12px; -fx-text-fill: white;");
    ObservableList<String> listBookOptions = FXCollections.observableArrayList(
    "List by Usernames", "List by title", "List by isbn", "List by author name ",
    "List by category","List by Quantity","List by price","List ALL");
    ComboBox<String> combo3 = new ComboBox<>(listBookOptions);
    combo3.setStyle("-fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px;-fx-pref-height: 30px;");

    combo3.setOnAction(e -> {
    List<String> bookList = new ArrayList<>();
    Book bok=new Book();
    String selectedItem3 = combo3.getSelectionModel().getSelectedItem();
    if (selectedItem3 != null) {
        switch (selectedItem3) {
            case "List by title":
                bookList=bok.ListbyTitle();
                break;
            case "List by isbn":
                 bookList=bok.Listbyisbn(); 
                break;
            case "List by author name":
                bookList=bok.ListbyAuthorName();
                break;
            case "List by category":
                bookList=bok.ListbyCategory();
                break;    
            case "List by Quantity":
                bookList=bok.ListbyQuantity();
                break;
            case "List by price":
                bookList=bok.ListbyPrice();
                break;     
            case "List ALL":
                bookList=bok.ListAll();
                break;
        }
    }
    //list all (isbn,title,author,category,price,quantity)
    dialog.showListDialog(bookList);
});

// books in the same category
    Button Books_categButton = new Button("Books&category");
    Books_categButton.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    Books_categButton.setOnAction(e -> dialog.showBookByCategoryDialog());
   
// view the category that the book belongs to
    Button categ_bookButton = new Button("Category of a book");
    categ_bookButton.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    categ_bookButton.setOnAction(e -> dialog.showCategoryBookDialog());
   
// supplier
    // supplier with max order
    Button maxSupplierOrderBtn=new Button("Max Supplier Order");
    maxSupplierOrderBtn.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    Supplier max1=new Supplier();
    max1=max1.maxOrderSupplier();
    List<String>maxSupplierData=new ArrayList<>();
    maxSupplierData.add("Supplier with maximum order Name: "+max1.getSname()+"\nSupplier ID "+max1.getId()+max1.displayOrdersDetails());
    maxSupplierOrderBtn.setOnAction(e -> dialog.showListDialog(maxSupplierData));
    
    // supplier with max revenue
    Button maxSupplierRevenueBtn=new Button("Max Supplier Revenue");
    maxSupplierRevenueBtn.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    Supplier max2=new Supplier();
    max2=max2.maxRevenueSupplier();
    List<String>maxSupplierData1=new ArrayList<>();
    maxSupplierData1.add("Supplier with maximum revenue Name: "+max2.getSname()+"\nSupplier ID "+max2.getId()+max2.displayOrdersDetails());
    maxSupplierRevenueBtn.setOnAction(e -> dialog.showListDialog(maxSupplierData1));
    
    // no. of orders per each supplier and their details
    Button orderDetailsbtn=new Button("Suppliers & order details");
    orderDetailsbtn.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    List<String>orderDetails=Supplier.displayAllOrdersDetails(Supplier.suppliersList);
    orderDetailsbtn.setOnAction(e -> dialog.showListDialog(orderDetails));


    grid.add(imageView1, 0, 0);
    grid.add(imageView2, 1, 0);
    grid.add(imageView3, 2, 0);
    grid.add(imageView4, 3, 0);
    grid.add(imageView5, 0, 3);
    grid.add(addBookButton,0,4);
    grid.add(imageView6, 1, 3);
    grid.add(editBookButton,1,4);
    grid.add(imageView7, 2, 3);
    grid.add(removeBookButton, 2, 4);
    grid.add(imageView8, 3, 3);
    grid.add(combo1, 0, 2);
    grid.add(addLbl, 0, 2);
    grid.add(editUserButton, 1, 2);
    grid.add(removeUserButton, 2, 2);
    grid.add(combo2,3,2);
    grid.add(listLbl,3,2);
    grid.add(combo3, 3, 4);
    grid.add(listLbl2, 3, 4);
    grid.add(Books_categButton,0,5);
    grid.add(categ_bookButton, 1, 5);
    grid.add(maxSupplierOrderBtn,2,5);
    grid.add(maxSupplierRevenueBtn,3,5);
    grid.add(orderDetailsbtn,4,5);
    Scene newScene = new Scene(grid, 1000, 800);
    return newScene;
}

protected boolean editUser(String oldUsername, String newUsername, String newPassword) { //to show dialog or alert
    User userToEdit = new User();
    userToEdit=userToEdit.editUser(User.users, oldUsername, newUsername, newPassword);// called from user class
    if (userToEdit != null) {
        if (!oldUsername.equals(newUsername) && isUsernameExists(newUsername)) {
            showAlert("Edit Failed!\nNew username is already taken", Alert.AlertType.ERROR);
            return false;
        }
        userToEdit.setUserName(newUsername);
        userToEdit.setPassword(newPassword);
        showAlert("User information updated successfully", Alert.AlertType.INFORMATION);
        return true;
    } else {
        showAlert("User not found", Alert.AlertType.ERROR);
        return false;
    }
}

private User.UserType getUserTypeFromSelectedItem(String selectedItem) {
    switch (selectedItem) {
        case "Add Admin":
            return User.UserType.ADMIN;
        case "Add Librarian":
            return User.UserType.LIBRARIAN;
        case "Add Borrower":
            return User.UserType.BORROWER;
        default:
            throw new IllegalArgumentException("Invalid user type: " + selectedItem);
    }
}


protected boolean removeUser(String username) {
    User userToRemove= new Admin();
    userToRemove=userToRemove.removeUser(User.users, username);
    if (userToRemove != null) {
        User.users.remove(userToRemove);
        showAlert("User removed successfully", Alert.AlertType.INFORMATION);
        return true;
    } else {
        showAlert("User not found", Alert.AlertType.ERROR);
        return false;
    }
}

public boolean isUniqueISBN(String isbn) {
        for (Book book : Book.booksList) {
            if (book.getISBN().equals(isbn)) {
                return false;
            }
        }
        return true; 
} 

protected Scene LibrarianScene() {
        
    VBox root=new VBox();   
    root.setAlignment(Pos.CENTER);
    Scene newScene=new Scene(root,700,600);
    
    return newScene;
}

protected Scene BorrowerScene() {
    Label lbl=new Label("Welcome To The Library...\nBorrower");
    lbl.setStyle("-fx-font-size: 21px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: black;");
    VBox root=new VBox(lbl);   
    root.setAlignment(Pos.CENTER);
    Scene newScene=new Scene(root,700,600);
    
    return newScene;
}

private void showAlert(String message, Alert.AlertType alertType) {
        Alert alert = new Alert(alertType);
        alert.setTitle("Message");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
public static void main(String[] args) {
    User.users = Files.readObjectsFromFile("users.bin");
    Book.booksList = Files.readObjectsFromFile("book.bin");
    Supplier.suppliersList=Files.readObjectsFromFile("suppliers.bin");
    for(Supplier sup:Supplier.suppliersList)
    {
        System.out.println(sup.getSname()+"  "+sup.getId()+" "+sup.getOrderlist()+sup.displayOrdersDetails());
    }
    launch(args);
    Files.writeObjectsToFile(User.users, "users.bin");
    Files.writeObjectsToFile(Book.booksList, "book.bin");
    Files.writeObjectsToFile(Supplier.suppliersList,"suppliers.bin");
}
}
