
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class FirstPage extends Application implements Serializable{
    
    protected Stage primaryStage;
    protected TextField usernameField;
    protected PasswordField passwordField;
    protected PasswordField retypePasswordField;
    protected Button login,signup1,signup2;
    protected ObservableList<String> observableList;
    private User accountObj;
    private final Dialogs dialog=new Dialogs(); //just for calling dialog methods
  
@Override
public void start(Stage primaryStage) {
    this.primaryStage = primaryStage;
    primaryStage.setTitle("Library System");
    LoginScene(primaryStage);
    //primaryStage.setScene(AdminScene());
    accountObj = new User();
    //primaryStage.setResizable(false);
    primaryStage.show();

}    
   
protected boolean Login(String username, String password, Stage primaryStage) {
    accountObj = accountObj.login(User.users, username, password); //call login method in user class

    if (accountObj != null) {
        System.out.println("Login successful!");

        User.UserType userType = ((User) accountObj).getUserType();

        switch (userType) {
            case ADMIN:
                primaryStage.setScene(AdminScene());
                break;
            case LIBRARIAN:
                primaryStage.setScene(LibrarianScene());
                break;
            case BORROWER:
                primaryStage.setScene(BorrowerScene());
                break;
        }

        return true;
    }

    return false;
}

protected boolean signup(String username, String password, Stage primaryStage) {
    if (isUsernameExists(username)) {
        dialog.showAlert("Signup Failed!\nUsername ALREADY taken", Alert.AlertType.ERROR);
        return false;          
    } else {
            accountObj = new Borrower(username, password);
            accountObj.signUp(User.users, accountObj); // called from user class
            primaryStage.setScene(BorrowerScene());
        }
    //reset fields to be used later
        usernameField.clear();
        passwordField.clear();
        return true;
}

protected boolean isUsernameExists(String username) {
    for (User user : User.users) {
        if (user.getUserName().equals(username)) {
            return true; 
        }
    }
    return false; 
}
//scenes
protected void LoginScene(Stage primaryStage) {
        Image image = new Image("file:ll.png");
        ImageView imageView = new ImageView(image);
        imageView.fitWidthProperty().bind(primaryStage.widthProperty());
        imageView.fitHeightProperty().bind(primaryStage.heightProperty());

        Label usernameLbl1 = new Label("Username  ");
        usernameLbl1.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");
        usernameField = new TextField();
       
        Label passwordLbl = new Label("Password  ");
        passwordLbl.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");
        passwordField = new PasswordField();
       
        login = new Button("Login");
        signup1 = new Button("Sign Up");
        login.setStyle("-fx-font-size: 15px; -fx-background-color: gray; -fx-text-fill: white;");
        signup1.setStyle("-fx-font-size: 15px; -fx-background-color: gray; -fx-text-fill: white;");

        FlowPane root1 = new FlowPane(usernameLbl1, usernameField);
        root1.setAlignment(Pos.CENTER);
        root1.setHgap(10);
        root1.setVgap(5);
        root1.setPadding(new Insets(0, 0, 0, 300));

        FlowPane root2 = new FlowPane(passwordLbl, passwordField);
        root2.setAlignment(Pos.CENTER);
        root2.setHgap(10);
        root2.setVgap(5);
        root2.setPadding(new Insets(20, 0, 0, 300));

        FlowPane root3 = new FlowPane(login, signup1);
        root3.setAlignment(Pos.CENTER);
        root3.setHgap(20);
        root3.setPadding(new Insets(30, 0, 0, 400));

        VBox Root = new VBox();
        Root.setAlignment(Pos.CENTER);
        Root.setSpacing(10);
        Root.getChildren().addAll(root1, root2, root3);
        
        StackPane all = new StackPane(imageView, Root);
        Scene scene = new Scene(all, 1000, 800);
        login.setOnAction(e -> {
           String username = usernameField.getText();
           String password = passwordField.getText();
           if (!Login(username, password, primaryStage))
        dialog.showAlert("Invalid username or password!", Alert.AlertType.ERROR);
        });

        signup1.setOnAction(e -> {
           primaryStage.setScene(signUpScene());
});

        primaryStage.setScene(scene);
    }
public Scene signUpScene() {
    Image image = new Image("file:ll.png");
    ImageView imageView = new ImageView(image);
    imageView.fitWidthProperty().bind(primaryStage.widthProperty());
    imageView.fitHeightProperty().bind(primaryStage.heightProperty());
    Label usernameLbl1 = new Label("Username  ");
    usernameLbl1.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");
    usernameField = new TextField();
    Label passwordLbl = new Label("Password  ");
    passwordField = new PasswordField();
    passwordLbl.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");

    Label reTypepasswordLbl = new Label("Re-Type Password");
    retypePasswordField = new PasswordField();
    reTypepasswordLbl.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");

    signup2 = new Button("Sign Up");
    signup2.setStyle("-fx-font-size: 15px; -fx-background-color: gray; -fx-text-fill: white;");

    FlowPane root1 = new FlowPane(usernameLbl1, usernameField);
    root1.setAlignment(Pos.CENTER);
    root1.setHgap(80);
    root1.setPadding(new Insets(0, 0, 0, 300));

    FlowPane root2 = new FlowPane(passwordLbl, passwordField);
    root2.setAlignment(Pos.CENTER);
    root2.setHgap(80);
   // root2.setVgap(5);
    root2.setPadding(new Insets(0, 0, 0, 300));

    FlowPane root3 = new FlowPane(reTypepasswordLbl, retypePasswordField);
    root3.setAlignment(Pos.CENTER);
    root3.setHgap(30);
    root3.setVgap(5);
    root3.setPadding(new Insets(0, 50, 0, 350));

    FlowPane root4 = new FlowPane( signup2);
    root4.setAlignment(Pos.CENTER);
    root4.setHgap(20);
    root4.setPadding(new Insets(20, 0, 0, 460));

    VBox Root = new VBox();
    Root.setAlignment(Pos.CENTER);
    Root.setSpacing(10);
    Root.getChildren().addAll(root1, root2, root3, root4);
    StackPane all = new StackPane(imageView, Root);
    Scene scene = new Scene(all, 1000, 800);
    signup2.setOnAction(e -> {
        String username = usernameField.getText();
        String password = passwordField.getText();
        signup(username,password,primaryStage);
    
    });

    return scene;
}

private Scene AdminScene() {   
//add user
    ObservableList<String> addOptions = FXCollections.observableArrayList("Add Admin", "Add Librarian", "Add Borrower");
    ComboBox<String>combo1 = new ComboBox<>(addOptions);
    combo1.setPromptText("Add User");
    combo1.setStyle("-fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px;-fx-pref-height: 30px;");
    combo1.setOnAction(e -> {
        String selectedItem = combo1.getSelectionModel().getSelectedItem();
        if (selectedItem != null) {
            User.UserType userType = getUserTypeFromSelectedItem(selectedItem);
            dialog.showAddUserDialog(userType);
        }
    });
//add book
    Button addBookButton = new Button("Add Book");
    addBookButton=style(addBookButton);
    addBookButton.setOnAction(e -> dialog.showBookDialog(true));
//edit user
    Button editUserButton = new Button("Edit User");
    editUserButton=style(editUserButton);
    editUserButton.setOnAction(e -> dialog.showEditUserDialog());
//edit book
    Button editBookButton = new Button("Edit Book");
    editBookButton=style(editBookButton);
    editBookButton.setOnAction(e -> dialog.showBookDialog(false));
//remove user   
    Button removeUserButton = new Button("Remove User");
    removeUserButton=style(removeUserButton);
    removeUserButton.setOnAction(e -> dialog.showRemoveUserDialog());
//remove book
    Button removeBookButton = new Button("Remove Book");
    removeBookButton=style(removeBookButton);
    removeBookButton.setOnAction(e -> dialog.showRemoveBookDialog());
//list user
    ObservableList<String> listOptions = FXCollections.observableArrayList(
    "List by Usernames", "List by Passwords", "List by User Type", "List ALL");
    ComboBox<String> combo2 = new ComboBox<>(listOptions);
    combo2.setPromptText("List Users");
    combo2.setStyle("-fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px;-fx-pref-height: 30px;");

    combo2.setOnAction(e -> {
    List<String> use = new ArrayList<>();
    User user=new Admin();
    String selectedItem2 = combo2.getSelectionModel().getSelectedItem();
    if (selectedItem2 != null) {
        switch (selectedItem2) {
            case "List by Usernames":
                use = user.getUsernames();                
                break;
            case "List by Passwords":
                use = user.getPasswords(); 
                break;
            case "List by User Type":
               use = user.getUserTypes(); 
                break;
            case "List ALL":
                use = user. getAllUsers(); 
                break;
        }
    }
    dialog.showListDialog(use);
});
//list books    
    ObservableList<String> listBookOptions = FXCollections.observableArrayList( "List by title", "List by isbn", "List by author name ",
    "List by category","List by Quantity","List by price","List ALL");
    ComboBox<String> combo3 = new ComboBox<>(listBookOptions);
    combo3.setPromptText("List Books");
    combo3.setStyle("-fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px;-fx-pref-height: 30px;");
    combo3.setOnAction(e -> {
    List<String> bookList = new ArrayList<>();
    Book bok=new Book();
    String selectedItem3 = combo3.getSelectionModel().getSelectedItem();
    if (selectedItem3 != null) {
        switch (selectedItem3) {
            case "List by title":
                bookList=bok.ListbyTitle();
                break;
            case "List by isbn":
                 bookList=bok.Listbyisbn(); 
                break;
            case "List by author name":
                bookList=bok.ListbyAuthorName();
                break;
            case "List by category":
                bookList=bok.ListbyCategory();
                break;    
            case "List by Quantity":
                bookList=bok.ListbyQuantity();
                break;
            case "List by price":
                bookList=bok.ListbyPrice();
                break;     
            case "List ALL":
                bookList=bok.ListAll();
                break;
        }
    }
//list all (isbn,title,author,category,price,quantity)
    dialog.showListDialog(bookList);
});

// books in the same category
    Button Books_categButton = new Button("Books&category");
    Books_categButton=style(Books_categButton); //written method 
    Books_categButton.setOnAction(e -> dialog.showBookByCategoryDialog());
    
   //Books Reports
// view the category that the book belongs to
    Button categ_bookButton = new Button("Category of a book");
    categ_bookButton=style(categ_bookButton);
    categ_bookButton.setOnAction(e -> dialog.showCategoryBookDialog());
   
//No.of borrow over a specific period of time     
    Button NoBorrow = new Button("No.of Borrow");
    NoBorrow=style(NoBorrow);
    //NoBorrow.setOnAction(e -> );
    
//Most borrowed book and category it belogs to over a specific period of time  
    Button mostBorroweredBook = new Button("Most Borrowed Book");
    mostBorroweredBook=style(mostBorroweredBook);
    //mostBorroweredBook.setOnAction(e -> );
    
//Most revenue book and category it belogs to over a specific period of time  
    Button mostrevenueBook = new Button("Most Revenue Book");
    mostrevenueBook=style(mostrevenueBook);
    //mostrevenueBook.setOnAction(e -> );    
    
    //manage librarian
//No. of Borrowings per each Librarian and their details.    
    Button librarialBorrowings = new Button("Borrowing/Librarian");
    librarialBorrowings=style(librarialBorrowings);
    //librarialBorrowings.setOnAction(e -> ); 
    
//Librarian with max no.of borrowings  
    Button maxLibrarianBorrowing=new Button("Max Librarian Borrowings");
    maxLibrarianBorrowing=style(maxLibrarianBorrowing);
    //maxLibrarianRevenue.setOnAction(e -> );   
    
//Librarian with the maximum revenue. 
    Button maxLibrarianRevenue=new Button("Max Librarian Revenue");
    maxLibrarianRevenue=style(maxLibrarianRevenue);
    //maxLibrarianRevenue.setOnAction(e -> );   
    
    //manage Borrower
//No. of Borrowings per each Borrower and their details.   
    Button borrowerBorrowings = new Button("Borrowing/borrower");
    borrowerBorrowings=style(borrowerBorrowings);
    //borrowerBorrowings.setOnAction(e -> ); 
    
//Borrower with max no.of borrowings  
    Button maxBorrowerBorrowing=new Button("Max Borrower Borrowings");
    maxBorrowerBorrowing=style(maxBorrowerBorrowing);
    //maxBorrowerBorrowing.setOnAction(e -> );   
    
//Borrower with the maximum revenue. 
    Button maxBorrowerRevenue=new Button("Max Borrower Revenue");
    maxBorrowerRevenue=style(maxBorrowerRevenue);
    //maxBorrowerRevenue.setOnAction(e -> );   

    
    
// supplier
    // supplier with max order
    Button maxSupplierOrderBtn=new Button("Max Supplier Order");
    maxSupplierOrderBtn=style(maxSupplierOrderBtn);
    List<Supplier> max1=Supplier.maxOrderSupplier();
    List<String>maxSupplierData1=new ArrayList<>();
    maxSupplierData1.add("Supplier with maximum order:-\n");
    for(Supplier sup:max1)
    {
        maxSupplierData1.add(sup.toString()+"\ntotal number of orders: "+sup.numberOfOrders());
    }
    maxSupplierOrderBtn.setOnAction(e -> dialog.showListDialog(maxSupplierData1));
    
    // supplier with max revenue
    Button maxSupplierRevenueBtn=new Button("Max Supplier Revenue");
    maxSupplierRevenueBtn=style(maxSupplierRevenueBtn);
    List<Supplier>max2=Supplier.maxRevenueSupplier();
    List<String>maxSupplierData2=new ArrayList<>();
     maxSupplierData2.add("Supplier with maximum revenue:-\n");
    for(Supplier sup:max2)
    {
        maxSupplierData2.add(sup.toString()+"\ntotal revenue: "+sup.totalRevenue());
    }
    maxSupplierRevenueBtn.setOnAction(e -> dialog.showListDialog(maxSupplierData2));
    
    //make order
    Button makeOrderBtn=new Button("Make Order");
    makeOrderBtn=style(makeOrderBtn);
    makeOrderBtn.setOnAction(e->dialog.showOrderDialog());
    
    // no. of orders per each supplier and their details
    Button orderDetailsbtn=new Button("Suppliers & order details");
    orderDetailsbtn=style(orderDetailsbtn);
    List<String>orderDetails=Supplier.displayAllOrdersDetails(Supplier.suppliersList);
    orderDetailsbtn.setOnAction(e -> dialog.showListDialog(orderDetails));
    
    //labels
    
    Label titleLabel=new Label("\tWelcome To The Library");
    titleLabel.setAlignment(Pos.TOP_CENTER);
    titleLabel.setStyle("-fx-font-size: 30px; -fx-font-family: 'Georgia'; -fx-font-style: italic; -fx-text-fill: white;");
    Label usersLabel=new Label("Manage Users");
    usersLabel=styleLabel(usersLabel);

    Label booksLabel=new Label("Manage Books");
    booksLabel=styleLabel(booksLabel);
    
    Label librarianLabel=new Label("Manage Librarians");
    librarianLabel=styleLabel(librarianLabel);
    
    Label borrowerLabel=new Label("Manage Borrowers");
    borrowerLabel=styleLabel(borrowerLabel);
    
    Label booksReportsLabel=new Label("Books Reports");
    booksReportsLabel=styleLabel(booksReportsLabel);
    
    
    Label O_SLabel=new Label("Manage Orders & Suppliers");
    O_SLabel.setStyle("-fx-font-size: 18px; -fx-font-family: 'Georgia'; -fx-font-style: italic; -fx-text-fill: white;");
    
    
    //add image for the book (the user will addit)
    
    HBox acc=new HBox();
    ImageView i=new ImageView(new Image("file:acc.png"));
    i.setFitHeight(70);     i.setFitWidth(70);
    Label name=new Label("\n"+accountObj.getUserName());
    name.setStyle("-fx-font-size: 15px; -fx-font-family: 'Georgia'; -fx-font-style: italic; -fx-text-fill: white;");
    Label title=new Label("\t\t\t\t\tWelcome to the Library");
    title.setStyle("-fx-font-size: 40px; -fx-font-family: 'Georgia'; -fx-font-style: italic; -fx-text-fill: white;");
    title.setAlignment(Pos.CENTER);
    acc.getChildren().addAll(i,name,title);

    VBox users=new VBox();   
    users.getChildren().addAll(usersLabel,combo1,editUserButton,removeUserButton,combo2);
    users.setSpacing(10);
    
    VBox books=new VBox();   
    books.getChildren().addAll(booksLabel,addBookButton,editBookButton,removeBookButton,combo3,Books_categButton);
    books.setSpacing(10);
    
    VBox booksReports=new VBox();
    booksReports.getChildren().addAll(booksReportsLabel,categ_bookButton,NoBorrow,mostBorroweredBook,mostrevenueBook);
    booksReports.setSpacing(10);
    
    VBox manageLibrarian=new VBox();
    manageLibrarian.getChildren().addAll(librarianLabel,librarialBorrowings,maxLibrarianBorrowing,maxLibrarianRevenue);
    manageLibrarian.setSpacing(10);
    
    VBox manageBorrower=new VBox();
    manageLibrarian.getChildren().addAll(borrowerLabel,borrowerBorrowings,maxBorrowerBorrowing,maxBorrowerRevenue);
    manageLibrarian.setSpacing(10);
    
    VBox orders_Supp=new VBox();   
    orders_Supp.getChildren().addAll(O_SLabel,makeOrderBtn,maxSupplierOrderBtn,maxSupplierRevenueBtn,orderDetailsbtn);
    orders_Supp.setSpacing(10);
    HBox actions=new HBox(30,users,books,booksReports,manageLibrarian,manageBorrower,orders_Supp);
    actions.setPadding(new Insets(150));
    
    FlowPane all=new FlowPane(acc,actions);
    //background
    ImageView imageView1 = new ImageView(new Image("file:reading1.png"));
    StackPane root1=new StackPane(imageView1,all);
    //imageView1.setPreserveRatio(true);
    imageView1.fitWidthProperty().bind(primaryStage.widthProperty());
    imageView1.fitHeightProperty().bind(primaryStage.heightProperty());
//    imageView1.setFitWidth(900);
//    imageView1.setFitHeight(2000);
    Scene newScene = new Scene(root1,1000,700);
    return newScene;
}


protected boolean editUser(String oldUsername, String newUsername, String newPassword) { 
    User userToEdit = new User();
    userToEdit=userToEdit.editUser(User.users, oldUsername, newUsername, newPassword);// called from user class
    if (userToEdit != null) {
        if (!oldUsername.equals(newUsername) && isUsernameExists(newUsername)) {
            dialog.showAlert("Edit Failed!\nNew username is already taken", Alert.AlertType.ERROR);
            return false;
        }
        userToEdit.setUserName(newUsername);
        userToEdit.setPassword(newPassword);
        dialog.showAlert("User information updated successfully", Alert.AlertType.INFORMATION);
        return true;
    } else {
        dialog.showAlert("User not found", Alert.AlertType.ERROR);
        return false;
    }
}

private User.UserType getUserTypeFromSelectedItem(String selectedItem) {
    switch (selectedItem) {
        case "Add Admin":
            return User.UserType.ADMIN;
        case "Add Librarian":
            return User.UserType.LIBRARIAN;
        case "Add Borrower":
            return User.UserType.BORROWER;
        default:
            throw new IllegalArgumentException("Invalid user type: " + selectedItem);
    }
}


protected boolean removeUser(String username) {
    User userToRemove= new Admin();
    userToRemove=userToRemove.removeUser(User.users, username);
    if (userToRemove != null) {
        User.users.remove(userToRemove);
        dialog.showAlert("User removed successfully", Alert.AlertType.INFORMATION);
        return true;
    } else {
        dialog.showAlert("User not found", Alert.AlertType.ERROR);
        return false;
    }
}

protected Scene LibrarianScene() {
        
    VBox root=new VBox();   
    root.setAlignment(Pos.CENTER);
    Scene newScene=new Scene(root,700,600);
    
    return newScene;
}

protected Scene BorrowerScene() {
    Label lbl=new Label("Welcome To The Library...\nBorrower");
    lbl.setStyle("-fx-font-size: 21px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: black;");
    VBox root=new VBox(lbl);   
    root.setAlignment(Pos.CENTER);
    Scene newScene=new Scene(root,700,600);
    
    return newScene;
}
public Button style(Button btn)
{
    btn.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    return btn;
}
public Label styleLabel(Label lbl)//for size 22 only
{
    lbl.setStyle("-fx-font-size: 22px; -fx-font-family: 'Georgia'; -fx-font-style: italic; -fx-text-fill: white;");
    return lbl;
}
public static void main(String[] args) {
    User.users = Files.readObjectsFromFile("users.bin");
    Book.booksList = Files.readObjectsFromFile("book.bin");
    Supplier.suppliersList=Files.readObjectsFromFile("suppliers.bin");
//    for(Supplier sup:Supplier.suppliersList)
//    {
//        System.out.println(sup.getSname()+"  "+sup.getId()+" "+sup.getOrderlist()+sup.displayOrdersDetails());
//    }
    launch(args);
    Files.writeObjectsToFile(User.users, "users.bin");
    Files.writeObjectsToFile(Book.booksList, "book.bin");
    Files.writeObjectsToFile(Supplier.suppliersList,"suppliers.bin");
}
}
