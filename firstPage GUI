import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class FirstPage extends Application implements Serializable{
    protected static List<User> users;
    protected Stage primaryStage;
    protected TextField usernameField;
    protected PasswordField passwordField;
    protected PasswordField retypePasswordField;
    protected Button login;
    protected Button signup1;
    protected Button signup2;
    protected ObservableList<String> observableList;
    private User accountObj;
    private ComboBox<String> combo;
   
    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;
        primaryStage.setTitle("Library System");
        LoginScene(primaryStage);
        primaryStage.setResizable(false);
        primaryStage.show();

    }    
protected boolean Login(String username, String password, Stage primaryStage) {
    accountObj = User.login(users, username, password);

    if (accountObj != null) {
        System.out.println("Login successful!");

        User.UserType userType = ((User) accountObj).getUserType();

        switch (userType) {
            case ADMIN:
                primaryStage.setScene(AdminScene());
                break;
            case LIBRARIAN:
                primaryStage.setScene(LibrarianScene());
                break;
            case BORROWER:
                primaryStage.setScene(BorrowerScene());
                break;
        }

        return true;
    }

    return false;
}

protected boolean signup(String username, String password, Stage primaryStage, String selectedItem) {
    if (isUsernameExists(username)) {
        showAlert("Signup Failed!\nUsername ALREADY taken", Alert.AlertType.ERROR);
        return false;          
    } else {
            accountObj = new Borrower(username, password, User.UserType.BORROWER);
            users.add(accountObj);
            primaryStage.setScene(BorrowerScene());
        }
        usernameField.clear();
        passwordField.clear();

        return true;
}

protected boolean isUsernameExists(String username) {
    for (User user : users) {
        if (user.getUserName().equals(username)) {
            return true; 
        }
    }
    return false; 
}

//scenes
protected void LoginScene(Stage primaryStage) {
        Image image = new Image("file:ll.png");
        ImageView imageView = new ImageView(image);
        imageView.setFitWidth(primaryStage.getWidth());
        imageView.setFitHeight(primaryStage.getHeight());

        Label usernameLbl1 = new Label("Username  ");
        usernameLbl1.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");
        usernameField = new TextField();
       
        Label passwordLbl = new Label("Password  ");
        passwordLbl.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");
        passwordField = new PasswordField();
       
        login = new Button("Login");
        signup1 = new Button("Sign Up");
        login.setStyle("-fx-font-size: 15px; -fx-background-color: gray; -fx-text-fill: white;");
        signup1.setStyle("-fx-font-size: 15px; -fx-background-color: gray; -fx-text-fill: white;");

        FlowPane root1 = new FlowPane(usernameLbl1, usernameField);
        root1.setAlignment(Pos.CENTER);
        root1.setHgap(10);
        root1.setVgap(5);
        root1.setPadding(new Insets(0, 0, 0, 300));

        FlowPane root2 = new FlowPane(passwordLbl, passwordField);
        root2.setAlignment(Pos.CENTER);
        root2.setHgap(10);
        root2.setVgap(5);
        root2.setPadding(new Insets(20, 0, 0, 300));

        FlowPane root3 = new FlowPane(login, signup1);
        root3.setAlignment(Pos.CENTER);
        root3.setHgap(20);
        root3.setPadding(new Insets(30, 0, 0, 400));

        VBox Root = new VBox();
        Root.setAlignment(Pos.CENTER);
        Root.setSpacing(10);
        Root.getChildren().addAll(root1, root2, root3);
        
        StackPane all = new StackPane(imageView, Root);
        Scene scene = new Scene(all, 1000, 800);
        login.setOnAction(e -> {
           String username = usernameField.getText();
           String password = passwordField.getText();
           if (!Login(username, password, primaryStage))
        showAlert("Invalid username or password!", Alert.AlertType.ERROR);
        });

        signup1.setOnAction(e -> {
           primaryStage.setScene(signUpScene());
});

        primaryStage.setScene(scene);
    }
public Scene signUpScene() {
    Image image = new Image("file:ll.png");
    ImageView imageView = new ImageView(image);

    Label usernameLbl1 = new Label("Username  ");
    usernameLbl1.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");
    usernameField = new TextField();
    Label passwordLbl = new Label("Password  ");
    passwordField = new PasswordField();
    passwordLbl.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");

    Label reTypepasswordLbl = new Label("Re-Type Password");
    retypePasswordField = new PasswordField();
    reTypepasswordLbl.setStyle("-fx-font-size: 13px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: white;");

    signup2 = new Button("Sign Up");
    signup2.setStyle("-fx-font-size: 15px; -fx-background-color: gray; -fx-text-fill: white;");

    FlowPane root1 = new FlowPane(usernameLbl1, usernameField);
    root1.setAlignment(Pos.CENTER);
    root1.setHgap(80);
    root1.setPadding(new Insets(0, 0, 0, 300));

    FlowPane root2 = new FlowPane(passwordLbl, passwordField);
    root2.setAlignment(Pos.CENTER);
    root2.setHgap(80);
   // root2.setVgap(5);
    root2.setPadding(new Insets(0, 0, 0, 300));

    FlowPane root3 = new FlowPane(reTypepasswordLbl, retypePasswordField);
    root3.setAlignment(Pos.CENTER);
    root3.setHgap(30);
    root3.setVgap(5);
    root3.setPadding(new Insets(0, 50, 0, 350));

    FlowPane root4 = new FlowPane( signup2);
    root4.setAlignment(Pos.CENTER);
    root4.setHgap(20);
    root4.setPadding(new Insets(20, 0, 0, 460));

    VBox Root = new VBox();
    Root.setAlignment(Pos.CENTER);
    Root.setSpacing(10);
    Root.getChildren().addAll(root1, root2, root3, root4);
    StackPane all = new StackPane(imageView, Root);
    Scene scene = new Scene(all, 1000, 800);
    signup2.setOnAction(e -> {
        String username = usernameField.getText();
        String password = passwordField.getText();
        signup(username,password,primaryStage,combo.getSelectionModel().getSelectedItem());
    
    });

    return scene;
}

private Scene AdminScene() {   
    //icons
    GridPane grid = new GridPane();
    grid.setAlignment(Pos.TOP_LEFT);
    grid.setHgap(10); 
    Image image1 = new Image("file:add_user.jpg");
    ImageView imageView1 = new ImageView(image1);
    imageView1.setFitWidth(150);
    imageView1.setFitHeight(150);

    Image image2=new Image("file:edit user.png");
    ImageView imageView2 = new ImageView(image2);
    imageView2.setFitWidth(150);
    imageView2.setFitHeight(150);
    
    Image image3=new Image("file:remove user.png");
    ImageView imageView3 = new ImageView(image3);
    imageView3.setFitWidth(120);
    imageView3.setFitHeight(105);
    
    Image image4=new Image("file:list user.png");
    ImageView imageView4 = new ImageView(image4);
    imageView4.setFitWidth(150);
    imageView4.setFitHeight(150);
    

    
//add
    Label addLbl = new Label("\t\tAdd");
    addLbl.setStyle("-fx-font-size: 12px; -fx-font-weight: bold; -fx-text-fill: white;");
    ObservableList<String> addOptions = FXCollections.observableArrayList("Add Admin", "Add Librarian", "Add Borrower");
    combo = new ComboBox<>(addOptions);
    combo.setStyle("-fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px;-fx-pref-height: 30px;"); 
    combo.setOnAction(e -> {
    String selectedItem = combo.getSelectionModel().getSelectedItem();
    combo.setOnAction(e -> {
    String selectedItem = combo.getSelectionModel().getSelectedItem();
    if (selectedItem != null) {
        User.UserType userType1 = getUserTypeFromSelectedItem(selectedItem);
        showAddUserDialog(userType, user -> {
            showAddUserDialog(userType1);
            users.add(user);
            System.out.println("User added: " + user.getUserName() + " (" + user.getUserType() + ")");
        });
    }
});

//edit 
    Button editUserButton = new Button("Edit User");
    editUserButton.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    editUserButton.setOnAction(e -> showEditUserDialog());
//remove    
    Button removeUserButton = new Button("Remove User");
    removeUserButton.setStyle("-fx-font-size: 12px; -fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px; -fx-pref-height: 30px;");
    removeUserButton.setOnAction(e -> showRemoveUserDialog());

//list
    Label listLbl = new Label("\t\tList");
    listLbl.setStyle("-fx-font-size: 12px; -fx-font-weight: bold; -fx-text-fill: white;");
    ObservableList<String> listOptions = FXCollections.observableArrayList(
    "List by Usernames", "List by Passwords", "List by User Type", "List ALL");
    ComboBox<String> combo2 = new ComboBox<>(listOptions);
    combo2.setStyle("-fx-background-color: black; -fx-text-fill: white; -fx-pref-width: 150px;-fx-pref-height: 30px;");

    combo2.setOnAction(e -> {
    List<String> use = new ArrayList<>();
    User user=new Admin();
    String selectedItem2 = combo2.getSelectionModel().getSelectedItem();
    if (selectedItem2 != null) {
        switch (selectedItem2) {
            case "List by Usernames":
                use = user.getUsernames();                
                break;
            case "List by Passwords":
                use = user.getPasswords(); 
                break;
            case "List by User Type":
               use = user.getUserTypes(); 
                break;
            case "List ALL":
                use = user. getAllUsers(); 
                break;
        }
    }
    showUserListDialog(use);
});

    grid.add(imageView1, 0, 0);
    grid.add(imageView2, 1, 0);
    grid.add(imageView3, 2, 0);
    grid.add(imageView4, 3, 0);
    grid.add(combo, 0, 2);
    grid.add(addLbl, 0, 2);
    grid.add(editUserButton, 1, 2);
    grid.add(removeUserButton, 2, 2);
    grid.add(combo2,3,2);
    grid.add(listLbl,3,2);
    Scene newScene = new Scene(grid, 1000, 800);
    return newScene;
}
private void showAddUserDialog(User.UserType userType) {
    Dialog<User> dialog = new Dialog<>();
    dialog.setTitle("Add User");
    dialog.setHeaderText("Enter user details:");

    TextField usernameField = new TextField();
    PasswordField passwordField = new PasswordField();

    dialog.getDialogPane().setContent(new VBox(10,
            new Label("Username:"), usernameField,
            new Label("Password:"), passwordField));

    ButtonType addButton = new ButtonType("Add", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(addButton, ButtonType.CANCEL);

    Node addButtonNode = dialog.getDialogPane().lookupButton(addButton);
    addButtonNode.setDisable(true);
    usernameField.textProperty().addListener((observable, oldValue, newValue) -> {
        addButtonNode.setDisable(newValue.trim().isEmpty());
    });

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == addButton) {
            String username = usernameField.getText();
            String password = passwordField.getText();
            User user = new User(username, password, userType);
            users.add(user);  // Directly add the user to the list
            System.out.println("User added: " + user.getUserName() + " (" + user.getUserType() + ")");
        }
        return null;
    });

    // Show the dialog
    dialog.showAndWait();
}

private User.UserType getUserTypeFromSelectedItem(String selectedItem) {
    switch (selectedItem) {
        case "Add Admin":
            return User.UserType.ADMIN;
        case "Add Librarian":
            return User.UserType.LIBRARIAN;
        case "Add Borrower":
            return User.UserType.BORROWER;
        default:
            throw new IllegalArgumentException("Invalid user type: " + selectedItem);
    }
}


protected boolean editUser(String oldUsername, String newUsername, String newPassword) { //to show dialog or alert
    User userToEdit = new User();
    userToEdit=userToEdit.editUser(users, oldUsername, newUsername, newPassword);// called from user class
    if (userToEdit != null) {
        if (!oldUsername.equals(newUsername) && isUsernameExists(newUsername)) {
            showAlert("Edit Failed!\nNew username is already taken", Alert.AlertType.ERROR);
            return false;
        }
        userToEdit.setUserName(newUsername);
        userToEdit.setPassword(newPassword);
        showAlert("User information updated successfully", Alert.AlertType.INFORMATION);
        return true;
    } else {
        showAlert("User not found", Alert.AlertType.ERROR);
        return false;
    }
}
private void showEditUserDialog() {
    Dialog<String> dialog = new Dialog<>();
    dialog.setTitle("Edit User");
    dialog.setHeaderText("Enter new username and password:");
    ButtonType editButtonType = new ButtonType("Edit", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(editButtonType, ButtonType.CANCEL);
    TextField newUsernameField = new TextField();
    PasswordField newPasswordField = new PasswordField();
    dialog.getDialogPane().setContent(new VBox(10, new Label("New Username:"), newUsernameField, new Label("New Password:"), newPasswordField));
    Node editButton = dialog.getDialogPane().lookupButton(editButtonType);
    editButton.setDisable(true);
    newUsernameField.textProperty().addListener((observable, oldValue, newValue) -> {
        editButton.setDisable(newValue.trim().isEmpty());
    });
    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == editButtonType) {
            return newUsernameField.getText() + "," + newPasswordField.getText();
        }
        return null;
    });
    Optional<String> result = dialog.showAndWait();
    result.ifPresent(newUserData -> {
        String[] userData = newUserData.split(",");
        String newUsername = userData[0];
        String newPassword = userData[1];
        editUser(usernameField.getText(), newUsername, newPassword);
    });
}

protected boolean removeUser(String username) {
    User userToRemove= new Admin();
    userToRemove=userToRemove.removeUser(users, username);
    if (userToRemove != null) {
        users.remove(userToRemove);
        showAlert("User removed successfully", Alert.AlertType.INFORMATION);
        return true;
    } else {
        showAlert("User not found", Alert.AlertType.ERROR);
        return false;
    }
}

private void showRemoveUserDialog() {
    Dialog<String> dialog = new Dialog<>();
    dialog.setTitle("Remove User");
    dialog.setHeaderText("Enter username:");

    ButtonType removeButtonType = new ButtonType("Remove", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(removeButtonType, ButtonType.CANCEL);

    TextField usernameField = new TextField();
    dialog.getDialogPane().setContent(new VBox(10, new Label("Username:"), usernameField));

    Node removeButton = dialog.getDialogPane().lookupButton(removeButtonType);
    removeButton.setDisable(true);

    usernameField.textProperty().addListener((observable, oldValue, newValue) -> {
        removeButton.setDisable(newValue.trim().isEmpty());
    });

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == removeButtonType) {
            return usernameField.getText();
        }
        return null;
    });

    Optional<String> result = dialog.showAndWait();
    result.ifPresent(username -> {
        removeUser(username);
    });
}

private void showUserListDialog(List<String> userList) {
    Alert alert = new Alert(Alert.AlertType.INFORMATION);
    alert.setTitle("User List");
    alert.setHeaderText(null);
    
    StringBuilder contentText = new StringBuilder();
    for (String user : userList) {
        contentText.append(user).append("\n");
    }

    alert.setContentText(contentText.toString());
    alert.showAndWait();
}

protected Scene LibrarianScene() {
        
    VBox root=new VBox();   
    root.setAlignment(Pos.CENTER);
    Scene newScene=new Scene(root,700,600);
    
    return newScene;
}

protected Scene BorrowerScene() {
    Label lbl=new Label("Welcome To The Library...\nBorrower");
    lbl.setStyle("-fx-font-size: 21px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: black;");
    VBox root=new VBox(lbl);   
    root.setAlignment(Pos.CENTER);
    Scene newScene=new Scene(root,700,600);
    
    return newScene;
}

private void showAlert(String message, Alert.AlertType alertType) {
        Alert alert = new Alert(alertType);
        alert.setTitle("Message");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
public static void main(String[] args) {
        users=User.readUsersFromFile("users.bin");
        launch(args);
        Admin.writeUsersToFile(users,"users.bin");       
    }
}
