import java.util.ArrayList;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class FirstPage extends Application {

    @Override
    public void start(Stage primaryStage) {

        Image image = new Image("file:ELib.png");
        ImageView imageView = new ImageView(image);
        
        primaryStage.setTitle("Login Page");

        Label usernameLbl1 = new Label("Username  ");
        TextField usernameField = new TextField();
        //remove borders except bottom
        usernameField.setStyle("-fx-background-color: transparent; -fx-background-radius: 0; -fx-border-width: 0 0 1 0; -fx-border-color: black;");

        Label passwordLbl = new Label("Password  ");
        TextField passwordField = new PasswordField();
        passwordField.setStyle("-fx-background-color: transparent; -fx-background-radius: 0; -fx-border-width: 0 0 1 0; -fx-border-color: black;");

        Button login = new Button("Login");
        Button signup = new Button("Sign Up");
        login.setStyle("-fx-font-size: 15px; -fx-background-color: #062758; -fx-text-fill: white;");
        signup.setStyle("-fx-font-size: 15px; -fx-background-color: #062758; -fx-text-fill: white;");
        
        FlowPane root1=new FlowPane(usernameLbl1,usernameField);
        root1.setAlignment(Pos.CENTER);
        root1.setHgap(10); 
        root1.setVgap(5);
        root1.setPadding(new Insets(0,0,0,200));
        
        FlowPane root2=new FlowPane(passwordLbl, passwordField);
        root2.setAlignment(Pos.CENTER);
        root2.setHgap(10); root2.setVgap(5);
        root2.setPadding(new Insets(0,0,0,200));
        
        FlowPane root3=new FlowPane(login,signup);
        root3.setAlignment(Pos.CENTER);
        root3.setHgap(20); 
        root3.setPadding(new Insets(20,0,0,250));
        
        VBox Root=new VBox();
        Root.setAlignment(Pos.CENTER);
        Root.setSpacing(10);
        Root.getChildren().addAll(root1,root2,root3);
        
        Label lbl3=new Label("Library\n\t\tManagment\n\t\t\t\t\tSystem");
        lbl3.setStyle("-fx-font-size: 21px; -fx-font-weight: bold; -fx-font-family: 'Georgia';-fx-font-style: italic; -fx-text-fill: #062758;");
        HBox lastRoot=new HBox(lbl3);
        lastRoot.setAlignment(Pos.CENTER_LEFT);
        lastRoot.setPadding(new Insets(0,0,0,20));
        
        StackPane all=new StackPane(imageView,Root,lastRoot);
        Scene scene = new Scene(all, 700, 600);
        
        
    login.setOnAction(e -> {
            String username = usernameField.getText();
            String password = passwordField.getText();

            if (login(username, password)) {
                showAlert("Login Successful!", Alert.AlertType.INFORMATION);//for testing
                // check userType
                // case 0 --> admin page
                // case 1 --> librarian page
                // case 2 --> borrower page
            } else {
                showAlert("Invalid username or password!", Alert.AlertType.ERROR);
            }
        });

        signup.setOnAction(e -> {
            String username = usernameField.getText();
            String password = passwordField.getText();

            if (signup(username, password)) {
                showAlert("Signup Successful!", Alert.AlertType.INFORMATION); 
                // case 0 --> admin page
                // case 1 --> librarian page
                // case 2 --> borrower page
            } else {
                showAlert("Signup Failed!", Alert.AlertType.ERROR);
            }
        });
        
        primaryStage.setResizable(false);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

   private boolean login(String username, String password) {
    for (User admin : Admin.admins) {
        if (admin.getUserName().equals(username) && admin.getPassword().equals(password)) {
            return true;
        }
    }
    for (User librarian : Librarian.librarians) {
        if (librarian.getUserName().equals(username) && librarian.getPassword().equals(password)) {
            return true;
        }
    }
    for (User borrower : Borrower.borrowers) {
        if (borrower.getUserName().equals(username) && borrower.getPassword().equals(password)) {
            return true;
        }
    }
        return false;
    }

   private boolean signup(String username, String password) {
    if (isAdminUsernameExists(username) || isLibrarianUsernameExists(username) || isBorrowerUsernameExists(username)) {
        return false; 
    }
    if (isAdminSignupAllowed(username)) 
        Admin.admins.add(new Admin(username, password));
    else if (isLibrarianSignupAllowed(username)) 
        Librarian.librarians.add(new Librarian(username, password));
    else{
        String UserName="borrower_"+username;
        Borrower.borrowers.add(new Borrower(UserName, password));
    }
    return true;
}

private boolean isAdminSignupAllowed(String username) {
    return username.startsWith("admin_allowed_");
}

private boolean isLibrarianSignupAllowed(String username) {
    return username.startsWith("librarian_allowed_");
}

private UserType getUserType(String username) {
    if (username.startsWith("admin_")) {
        return UserType.ADMIN;
    } else if (username.startsWith("librarian_")) {
        return UserType.LIBRARIAN;
    } else if (username.startsWith("borrower_")) {
        return UserType.BORROWER;
    } else {
        throw new IllegalArgumentException("Unknown user type for username: " + username);
    }
}

enum UserType {
    ADMIN,  //0
    LIBRARIAN,//1
    BORROWER //2
}


private boolean isAdminUsernameExists(String username) {
    for (User admin : Admin.admins) {
        if (admin.getUserName().equals(username)) {
            return true; 
        }
    }
    return false; 
}

private boolean isLibrarianUsernameExists(String username) {
    for (User librarian : Librarian.librarians) {
        if (librarian.getUserName().equals(username)) {
            return true;
        }
    }
    return false;
}
private boolean isBorrowerUsernameExists(String username) {
    for (User borrower : Borrower.borrowers) {
        if (borrower.getUserName().equals(username)) {
            return true; 
        }
    }
    return false; 
}       
    private void showAlert(String message, Alert.AlertType alertType) {
        Alert alert = new Alert(alertType);
        alert.setTitle("Message");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
    public static void main(String[] args) {
         Admin admin=new Admin();
        admin.readFromFile("adminInfo.txt");
        ArrayList<User>admins=Admin.admins;
        Librarian lib=new Librarian();
        lib.readFromFile("librarianInfo.txt");
        Borrower bor=new Borrower();
        bor.readFromFile("borrowerInfo.txt");
       admin.writeToFile(Admin.admins, "adminInfo.txt");
       lib.writeToFile(Librarian.librarians, "librarianInfo.txt");
       bor.writeToFile(Borrower.borrowers, "borrowerInfo.txt");
        launch(args);
    }
}
