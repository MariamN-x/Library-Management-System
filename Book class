
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

enum Category
{
  FICTION,
  NON_FICTION ,         
  MYSTERY,              
  SCIENCE_FICTION,      
  FANTASY,              
  ROMANCE,            
  HORROR,               
  BIOGRAPHY,            
  HISTORY,              
  SELF_HELP,            
  HEALTH,               
  TRAVEL,               
  COOKING,              
  CHILDREN,             
  YOUNG_ADULT,         
  SCIENCE,              
  PHILOSOPHY,           
  RELIGION,             
  ART,                  
  POETRY,               
  DRAMA,                
  COMICS,               
  CLASSICS,             
  CRIME ,               
  THRILLER,             
  BUSINESS,             
  ECONOMICS,            
  POLITICS,             
  SOCIOLOGY,            
  PSYCHOLOGY,           
  TECHNICAL,            
  COMPUTER_SCIENCE,     
  PROGRAMMING 
}

import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

public class Book {

    private static ArrayList<Book> books = new ArrayList<>();

    private String ISBN;
    private String title;
    private String author;
    private static int quantity = 0; // all books
    private int totalQuantity; // Total quantity of this book
    private double price;
    private Category category;
    private double rate;
    private boolean availability; // for borrowing status & new book

    private static ArrayList<Book> reservedBooks = new ArrayList<>();
    private static int noReservedBooks = 0;
    private static ArrayList<Book> returnBooks = new ArrayList<>();
    private int borrowCount;

    

    public Book(String ISBN, String title, String author, int totalQuantity, double price, Category category,
            double rate, boolean availability) {
        this.ISBN = ISBN;
        this.title = title;
        this.author = author;
        this.totalQuantity = totalQuantity;
        this.price = price;
        this.category = category;
        this.rate = rate;
        this.availability = availability;
        this.borrowCount = 0;
    }

    public void borrowBook() {
        borrowCount++;
    }

    public static ArrayList<Book> getBooks() {
        return books;
    }

    public static void setBooks(ArrayList<Book> books) {
        Book.books = books;
    }

    public String getISBN() {
        return ISBN;
    }

    public void setISBN(String ISBN) {
        this.ISBN = ISBN;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public static int getQuantity() {
        return quantity;
    }

    public static void setQuantity(int quantity) {
        Book.quantity = quantity;
    }

    public int getTotalQuantity() {
        return totalQuantity;
    }

    public void setTotalQuantity(int totalQuantity) {
        this.totalQuantity = totalQuantity;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

//    public Category getCategory() {
//        return category;
//    }
//
//    public void setCategory(Category category) {
//        this.category = category;
//    }

    public double getRate() {
        return rate;
    }

    public void setRate(double rate) {
        this.rate = rate;
    }

    public boolean isAvailability() {
        return availability;
    }

    public void setAvailability(boolean availability) {
        this.availability = availability;
    }

    @Override
    public String toString() {
        return "Book{" + "ISBN='" + ISBN + '\'' + ", title='" + title + '\'' + ", author='" + author + '\''
                + ", price=" + price + ", quantity=" + quantity + ", rate=" + rate + '}';
    }

    public static Book findBookByISBN(ArrayList<Book> books, String isbn) {
        for (Book book : books) {
            if (book.getISBN().equals(isbn)) {
                return book;
            }
        }
        return null; // Book not found
    }

    public void addBook() {
        Scanner in = new Scanner(System.in);
        System.out.print("Enter new ISBN: ");
        String newISBN = in.nextLine();

        if (isUniqueISBN(newISBN)) {
            System.out.print("Enter new title: ");
            setTitle(in.nextLine());

            System.out.print("Enter new author: ");
            setAuthor(in.nextLine());

            System.out.print("Enter new Quantity: ");
            setTotalQuantity(in.nextInt());
            in.nextLine();

            System.out.print("Enter new Category: ");
            setCategory(Category.valueOf(in.nextLine().toUpperCase()));

            System.out.print("Enter new price: ");
            setPrice(in.nextDouble());

            System.out.print("Enter new rate: ");
            setRate(in.nextDouble());


              books.add(this);
            //books.add(new Book(newISbn,));

            System.out.println("New book added successfully.");
        } else {
            System.out.println("ISBN already exists. Cannot add the book.");
        }
    }

    public boolean isUniqueISBN(String isbn) {
        for (Book book : books) {
            if (book.getISBN().equals(isbn)) {
                return false; // ISBN already exists in the list
            }
        }
        return true; // ISBN is unique
    }
    public void deleteBookByISBN(String isbn) {
        Book book = findBookByISBN(books, isbn);
        if (book != null) {
            books.remove(book);
            System.out.println("Book deleted successfully.");
        } else {
            System.out.println("Book not found. Cannot delete book.");
        }
    }

    public void editBook() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter ISBN of the book to edit: ");
        String isbn = scanner.nextLine();

        Book bookToEdit = null;
        for (Book book : books) {
            if (book.getISBN().equals(isbn)) {
                bookToEdit = book;
                break;
            }
        }

        if (bookToEdit != null) {
            System.out.println("Book found. Select the attribute to edit:");
            System.out.println("1. Title");
            System.out.println("2. Author");
            System.out.println("3. Quantity");
            System.out.println("4. Category");
            System.out.println("5. Price");
            System.out.println("6. Rate");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter new title: ");
                    String newTitle = scanner.nextLine();
                    bookToEdit.setTitle(newTitle);
                    System.out.println("Title updated successfully.");
                    break;
                case 2:
                    System.out.print("Enter new author: ");
                    String newAuthor = scanner.nextLine();
                    bookToEdit.setAuthor(newAuthor);
                    System.out.println("Author updated successfully.");
                    break;
                case 3:
                    System.out.print("Enter new quantity: ");
                    int newQuantity = scanner.nextInt();
                    scanner.nextLine();
                    bookToEdit.setTotalQuantity(newQuantity);
                    System.out.println("Quantity updated successfully.");
                    break;
                case 4:
                    System.out.print("Enter new category: ");
                    String newCategory = scanner.nextLine();
                    bookToEdit.setCategory(Category.valueOf(newCategory.toUpperCase()));
                    System.out.println("Category updated successfully.");
                    break;
                case 5:
                    System.out.print("Enter new price: ");
                    double newPrice = scanner.nextDouble();
                    scanner.nextLine();
                    bookToEdit.setPrice(newPrice);
                    System.out.println("Price updated successfully.");
                    break;
                case 6:
                    System.out.print("Enter new rate: ");
                    double newRate = scanner.nextDouble();
                    scanner.nextLine();
                    bookToEdit.setRate(newRate);
                    System.out.println("Rate updated successfully.");
                    break;
                default:
                    System.out.println("Invalid choice. No attribute updated.");
            }
        } else 
        {
            System.out.println("Book not found.");
        }
    }
       public void setCategory(Category category) {
        this.category = (String)category.name();
        setBookByCategory(this);
    }

    public Category getCategory() {
        return Category.valueOf(category);
    }
//    private void setBorrowCount(Book book) {
//        int isbn = book.getISBN();
//        if (borrowCount.containsKey(isbn)) {
//            int count = borrowCount.get(isbn);
//            borrowCount.put(isbn, count + 1);
//        } else {
//            borrowCount.put(isbn, 1);
//        }
//        
//    }
//    
//    public void Borrow(Book book) {
//        Integer isbn=book.ISBN;
//        int count = borrowCount.getOrDefault(isbn, 0);
//        borrowCount.put(isbn, count + 1);
//    }
//    
    public ArrayList<Book> selectCategory(Category category) {
    ArrayList<Book> selectedBooks = new ArrayList<>();

    for (Book book : books) {
        if (book.getCategory() == category) {
            selectedBooks.add(book);
        }
    }

    return selectedBooks;
}


 private void setBookByCategory(Book book) {
        Category category = book.getCategory();
        if (listByCategory.containsKey(category)) {
            listByCategory.get(category).add(book);
        } else {
            List<Book> books = new ArrayList<>();
            books.add(book);
            listByCategory.put(category, books);
        }
    }

    public ArrayList<Book> selectPreferences(String preference, int numberOfBooks) {
        ArrayList<Book> selectedBooks = new ArrayList<>();
        ArrayList<Book> preferenceBooks = new ArrayList<>();

        for (Book book : books) {
            if (book.getCategory().toString().equalsIgnoreCase(preference)) {
                preferenceBooks.add(book);
            }
        }

        // If the number of preference books is less than the desired number, return all preference books
        if (preferenceBooks.size() <= numberOfBooks) {
            return preferenceBooks;
        }

        // Randomly select the desired number of preference books
        Random random = new Random();
        while (selectedBooks.size() < numberOfBooks) {
            int randomIndex = random.nextInt(preferenceBooks.size());
            Book selectedBook = preferenceBooks.get(randomIndex);
            if (!selectedBooks.contains(selectedBook)) {
                selectedBooks.add(selectedBook);
            }
        }

        return selectedBooks;
    }



}
