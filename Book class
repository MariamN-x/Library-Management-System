package library;
//
//        * add book
//        * edit book
//        * search by any field 
//        * remove 
//        * list all books
//        * number of borrows over specific period of time 
//        * most borrowed book with category and time 
//        * least borrowed book with category and time 
//        * total profits 
//        * most revenue with category and time 
//        * least revenue with category and time 
//     

 
import java.util.ArrayList;

import java.util.Scanner;

enum Category
{
        
  MYSTERY,              
  SCIENCE_FICTION,      
  FANTASY,              
  PROGRAMMING 
}



public class Book {

    private static ArrayList<Book> books = new ArrayList<>();

    private int ISBN;
    private String title;
    private String author;
    private int totalQuantity; // Total quantity of this book
    private double price;
    private Category category;
    private boolean availability; // for borrowing status & new book

    private static ArrayList<Book> reservedBooks = new ArrayList<>();
    private static ArrayList<Book> returnBooks = new ArrayList<>();
    private int borrowCount;

    public Book(int ISBN, String title, String author, int totalQuantity, double price, Category category, boolean availability, int borrowCount) {
        this.ISBN = ISBN;
        this.title = title;
        this.author = author;
        this.totalQuantity = totalQuantity;
        this.price = price;
        this.category = category;
        this.availability = availability;
        this.borrowCount = borrowCount;
    }

    public static ArrayList<Book> getBooks() {
        return books;
    }

    public static void setBooks(ArrayList<Book> books) {
        Book.books = books;
    }

    public int getISBN() {
        return ISBN;
    }

    public void setISBN(int ISBN) {
        this.ISBN = ISBN;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public int getTotalQuantity() {
        return totalQuantity;
    }

    public void setTotalQuantity(int totalQuantity) {
        this.totalQuantity = totalQuantity;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public Category getCategory() {
        return category;
    }

    public void setCategory(Category category) {
        this.category = category;
    }

    public boolean isAvailability() {
        return availability;
    }

    public void setAvailability(boolean availability) {
        this.availability = availability;
    }

    public static ArrayList<Book> getReservedBooks() {
        return reservedBooks;
    }

    public static void setReservedBooks(ArrayList<Book> reservedBooks) {
        Book.reservedBooks = reservedBooks;
    }

    public static ArrayList<Book> getReturnBooks() {
        return returnBooks;
    }

    public static void setReturnBooks(ArrayList<Book> returnBooks) {
        Book.returnBooks = returnBooks;
    }

    public int getBorrowCount() {
        return borrowCount;
    }

    public void setBorrowCount(int borrowCount) {
        this.borrowCount = borrowCount;
    }
public void borrowBook() {
        borrowCount++;
    }
    
   


    public Book findBookByISBN(ArrayList<Book> books, int isbn) {
        for (Book book : books) {
            if (book.getISBN()==(isbn)) {
                return book;
            }
        }
        return null; // Book not found
    }

    public void addBook() {
        Scanner in = new Scanner(System.in);
        System.out.print("Enter ISBN: ");
        int newISBN = in.nextInt();

        if (isUniqueISBN(newISBN)) {
            in.nextLine();
            System.out.print("Enter  title: ");
            setTitle(in.nextLine());

            System.out.print("Enter  author: ");
            setAuthor(in.nextLine());
            in.nextLine();

            System.out.print("Enter  Quantity: ");
            setTotalQuantity(in.nextInt());
            in.nextLine();

            System.out.print("Enter  Category: ");
            setCategory(Category.valueOf(in.nextLine().toUpperCase()));
            in.nextLine();

            System.out.print("Enter  price: ");
            setPrice(in.nextDouble());
            in.nextLine();



              books.add(this);
            //books.add(new Book(newISbn,));

            System.out.println("New book added successfully.");
        } else {
            System.out.println("ISBN already exists. Cannot add the book.");
        }
    }

    public boolean isUniqueISBN(int  isbn) {
        for (Book book : books) {
            if (book.getISBN()==(isbn)) {
                return false; // ISBN already exists in the list
            }
        }
        return true; // ISBN is unique
    }
    public void deleteBookByISBN(int isbn) {
        Book book = findBookByISBN(books, isbn);
        if (book != null) {
            books.remove(book);
            System.out.println("Book deleted successfully.");
        } else {
            System.out.println("Book not found. Cannot delete book.");
        }
    }

    public void editBook() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter ISBN of the book to edit: ");
        int isbn = scanner.nextInt();

        Book bookToEdit = null;
        for (Book book : books) {
            if (book.getISBN()==isbn) {
                bookToEdit = book;
                break;
            }
        }

        if (bookToEdit != null) {
            System.out.println("Book found. Select the attribute to edit:");
            System.out.println("1. Title");
            System.out.println("2. Author");
            System.out.println("3. Quantity");
            System.out.println("4. Category");
            System.out.println("5. Price");
            System.out.println("6. Rate");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter new title: ");
                    String newTitle = scanner.nextLine();
                    bookToEdit.setTitle(newTitle);
                    System.out.println("Title updated successfully.");
                    break;
                case 2:
                    System.out.print("Enter new author: ");
                    String newAuthor = scanner.nextLine();
                    bookToEdit.setAuthor(newAuthor);
                    System.out.println("Author updated successfully.");
                    break;
                case 3:
                    System.out.print("Enter new quantity: ");
                    int newQuantity = scanner.nextInt();
                    scanner.nextLine();
                    bookToEdit.setTotalQuantity(newQuantity);
                    System.out.println("Quantity updated successfully.");
                    break;
                case 4:
                    System.out.print("Enter new category: ");
                    String newCategory = scanner.nextLine();
                    bookToEdit.setCategory(Category.valueOf(newCategory.toUpperCase()));
                    System.out.println("Category updated successfully.");
                    break;
                case 5:
                    System.out.print("Enter new price: ");
                    double newPrice = scanner.nextDouble();
                    scanner.nextLine();
                    bookToEdit.setPrice(newPrice);
                    System.out.println("Price updated successfully.");
                    break;
              
                default:
                    System.out.println("Invalid choice. No attribute updated.");
            }
        } else 
        {
            System.out.println("Book not found.");
        }
    }
    

    public void displayAllBooks() {
        for (Book book : books) {
            System.out.println(book);
        }
    }


    public ArrayList<Book> selectCategory() {
    ArrayList<Book> selectedBooks = new ArrayList<>();
    Scanner scanner = new Scanner(System.in);
    System.out.print("Enter Category of the book to edit: ");
    String categoryInput = scanner.nextLine();
    Category bookCategory = Category.valueOf(categoryInput.toUpperCase());
    for (Book book : books) {
        if (book.getCategory() == category) {
            selectedBooks.add(book);
        }
    }

    return selectedBooks;
}
  public  Book MostBorrowedBook(ArrayList<Book> books) {
        Book mostBorrowedBook = null;
        int maxBorrowedCount = 0;
        
        for (Book book : books) {
            if (book.getBorrowCount() > maxBorrowedCount) {
                mostBorrowedBook = book;
                maxBorrowedCount = book.getBorrowCount();
            }
        }
        
        return mostBorrowedBook;
    }
    
  public  Book LeastBorrowedBook(ArrayList<Book> books) {
        Book leastBorrowedBook = null;
        int minBorrowedCount = Integer.MAX_VALUE;
        
        for (Book book : books) {
            if (book.getBorrowCount() < minBorrowedCount) {
                leastBorrowedBook = book;
                minBorrowedCount = book.getBorrowCount();
            }
        }
        
        return leastBorrowedBook;
    }
    
  public Book MostRevenueBook(ArrayList<Book> books) {
        Book mostRevenueBook = null;
        double maxRevenue = 0;
        
        for (Book book : books) {
            double revenue = book.getPrice() * book.getBorrowCount();
            if (revenue > maxRevenue) {
                mostRevenueBook = book;
                maxRevenue = revenue;
            }
        }
        
        return mostRevenueBook;
    }
    
  public Book LeastRevenueBook(ArrayList<Book> books) {
        Book leastRevenueBook = null;
        double minRevenue = Double.MAX_VALUE;
        
        for (Book book : books) {
            double revenue = book.getPrice() * book.getBorrowCount();
            if (revenue < minRevenue) {
                leastRevenueBook = book;
                minRevenue = revenue;
            }
        }
        
        return leastRevenueBook;
    }

}
