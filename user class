/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */


/**
 *
 * @author Dell
 */
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class User implements Serializable{
    private static final long serialVersionUID = -1389733824459161677L;

    private String UserName;
    private String Password;
    private int loginAttempts = 0;//no. trails

   public User()
   {  
   }

    public User(String UserName, String Password) {
        this.UserName = UserName;
        this.Password = Password;
    }
    
    public void setUserName(String username) {
        this.UserName = username;
    }
    
    public void setPassword(String Password) {
        this.Password = Password;
    }

    public String getUserName() {
        return UserName;
    }

    public String getPassword() {
        return Password;
    }

    public int getLoginAttempts() {
        return loginAttempts;
    }

    public void setLoginAttempts(int loginAttempts) {
        this.loginAttempts = loginAttempts;
    }
    
    
    
public static List<User> readUsersFromFile(String fileName) {
        try (FileInputStream input = new FileInputStream(fileName)) {
            ObjectInputStream in = new ObjectInputStream(input);
            List<User> users = new ArrayList<>();
            boolean done = false;
            while (!done) {
                try {
                    User user = (User) in.readObject();
                    users.add(user);
                } catch (EOFException e) {
                    done = true;
                    input.close();
                } catch (ClassNotFoundException e) {
                    System.out.println("Unknown object type: " + e.getMessage());
                } catch (IOException e) {
                    System.out.println("Error reading object: " + e.getMessage());
                }
            }
            return users;
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
        }
        return null; 
    }


    public static void writeUsersToFile(List<User> users, String fileName) {
        try (FileOutputStream output = new FileOutputStream(fileName)) {
            ObjectOutputStream out = new ObjectOutputStream(output);
            for (User user : users) {
                out.writeObject(user);
            }
            out.close();
            System.out.println("Wrote " + users.size() + " users to file.");
        } catch (IOException e) {
            System.out.println("Error writing file: " + e.getMessage());
        }
    }

    public static User login(List<User> users, String userName, String password) {
        for (User user : users) {
            if (user.getUserName().equals(userName) && user.getPassword().equals(password)) {
                return user;
            }
        }
        return null;
    }

    public static void signUp(List<User> users, User user) {
        users.add(user);
        System.out.println("Signup successful!");
    }
    public void editUser()
    {
         Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter new username : ");
        String newUsername = scanner.nextLine();

        System.out.println("Enter new password : ");
        String newPassword = scanner.nextLine();

        // Update user information
        if (!newUsername.isEmpty()) {
            setUserName(newUsername);
        }

        if (!newPassword.isEmpty()) {
            setPassword(newPassword);
        }

        System.out.println("User information updated successfully!");
    }
    }
    
        
    
    
    
    
   
