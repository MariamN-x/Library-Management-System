import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonBar;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Dialog;
import javafx.scene.control.DialogPane;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.PasswordField;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.Spinner;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.TextInputDialog;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Collectors;
import javafx.scene.control.ListCell;
import javafx.scene.layout.HBox;
import javafx.stage.StageStyle;
import javafx.util.Pair;
public class Dialogs {

    
    // user 
    //add
    protected void showAddUserDialog(User.UserType userType) {
    Dialog<User> dialog = new Dialog<>();
    dialog.setTitle("Add User");
    dialog.setHeaderText("Enter user details:");

    TextField usernameField = new TextField();
    PasswordField passwordField = new PasswordField();

    dialog.getDialogPane().setContent(new VBox(10,
            new Label("Username:"), usernameField,
            new Label("Password:"), passwordField));

    ButtonType addButton = new ButtonType("Add", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(addButton, ButtonType.CANCEL);

    Node addButtonNode = dialog.getDialogPane().lookupButton(addButton);
    addButtonNode.setDisable(true);
    usernameField.textProperty().addListener((observable, oldValue, newValue) -> {
        addButtonNode.setDisable(newValue.trim().isEmpty());
    });

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == addButton) {
            String username = usernameField.getText();
            String password = passwordField.getText();
            User user = new User(username, password, userType);
            User.users.add(user);  // Directly add the user to the list
            showAlert("User added: " + user.getUserName() + " (" + user.getUserType() + ")",Alert.AlertType.INFORMATION);
        }
        return null;
    });
    dialog.showAndWait();
}
//edit
protected void showEditUserDialog() {
    TextInputDialog oldUsernameDialog = new TextInputDialog();
    oldUsernameDialog.setTitle("Edit User");
    oldUsernameDialog.setHeaderText("Enter old username:");
    Optional<String> oldUsernameResult = oldUsernameDialog.showAndWait();

    oldUsernameResult.ifPresent(oldUsername -> {
        // Now, ask for the new username and password
        Dialog<String> dialog = new Dialog<>();
        dialog.setTitle("Edit User");
        dialog.setHeaderText("Enter new username and password:");
        ButtonType editButtonType = new ButtonType("Edit", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(editButtonType, ButtonType.CANCEL);
        TextField newUsernameField = new TextField();
        PasswordField newPasswordField = new PasswordField();
        dialog.getDialogPane().setContent(new VBox(10, new Label("New Username:"), newUsernameField, new Label("New Password:"), newPasswordField));
        Node editButton = dialog.getDialogPane().lookupButton(editButtonType);
        editButton.setDisable(true);
        newUsernameField.textProperty().addListener((observable, oldValue, newValue) -> {
            editButton.setDisable(newValue.trim().isEmpty());
        });
        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == editButtonType) {
                return newUsernameField.getText() + "," + newPasswordField.getText();
            }
            return null;
        });
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newUserData -> {
            String[] userData = newUserData.split(",");
            String newUsername = userData[0];
            String newPassword = userData[1];
            new FirstPage().editUser(oldUsername, newUsername, newPassword);
        });
    });
}
    
//remove
protected void showRemoveUserDialog() {
    Dialog<String> dialog = new Dialog<>();
    dialog.setTitle("Remove User");
    dialog.setHeaderText("Enter username:");

    ButtonType removeButtonType = new ButtonType("Remove", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(removeButtonType, ButtonType.CANCEL);

    TextField usernameField = new TextField();
    dialog.getDialogPane().setContent(new VBox(10, new Label("Username:"), usernameField));

    Node removeButton = dialog.getDialogPane().lookupButton(removeButtonType);
    removeButton.setDisable(true);

    usernameField.textProperty().addListener((observable, oldValue, newValue) -> {
        removeButton.setDisable(newValue.trim().isEmpty());
    });

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == removeButtonType) {
            return usernameField.getText();
        }
        return null;
    });

    Optional<String> result = dialog.showAndWait();
    result.ifPresent(username -> {
         new FirstPage().removeUser(username);
    });
}
    

//list
protected void showListDialog(List<String> list) {
    Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("User List");
        alert.setHeaderText(null);

        StringBuilder contentText = new StringBuilder();
        for (String item : list) {
            contentText.append(item).append("\n\n");
        }
        // TextArea to enable text wrapping
        TextArea textArea = new TextArea(contentText.toString());
        textArea.setEditable(false);
        textArea.setWrapText(true);

        DialogPane dialogPane = alert.getDialogPane();
        dialogPane.setContent(textArea);
        alert.showAndWait();
}

//add & edit book
protected void showBookDialog(boolean isAddOperation) {

    final AtomicReference<Alert> alertReference = new AtomicReference<>(null); // to still show dialog after any alert

    Dialog<Book> dialog = new Dialog<>();
    dialog.setTitle(isAddOperation ? "Add Book" : "Edit Book");
    dialog.setHeaderText(isAddOperation ? "Enter book details:" : "Enter the ISBN for this book:");

    ButtonType actionButtonType = new ButtonType(isAddOperation ? "Add" : "Edit", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(actionButtonType, ButtonType.CANCEL);

     TextField isbnField = new TextField();
    TextField titleField = new TextField();
    TextField authorField = new TextField();
    TextField quantityField = new TextField();
    TextField priceField = new TextField();
    TextField categoryField = new TextField();
    TextField imagePath = new TextField();
    
    GridPane grid = new GridPane();
    grid.setVgap(15);
    grid.setHgap(5);
    grid.add(new Label("ISBN:"), 0, 0);
    grid.add(isbnField, 1, 0);
    grid.add(new Label("Title:"), 0, 1);
    grid.add(titleField, 1, 1);
    grid.add(new Label("Author:"), 0, 2);
    grid.add(authorField, 1, 2);
    grid.add(new Label("Quantity:"), 0, 3);
    grid.add(quantityField, 1, 3);
    grid.add(new Label("Price:"), 0, 4);
    grid.add(priceField, 1, 4);
    grid.add(new Label("Book image: "), 0, 5);
    grid.add(imagePath, 1, 5);
    grid.add(new Label("Categories:"), 0, 6);
    grid.add(categoryField, 1, 6);
     
    Node actionButtonNode = dialog.getDialogPane().lookupButton(actionButtonType);
    actionButtonNode.setDisable(false);
    dialog.getDialogPane().setContent(grid);

    List<TextField> fields = Arrays.asList(isbnField, quantityField, priceField, categoryField);
    fields.forEach(field -> {
        field.textProperty().addListener((observable, oldValue, newValue) ->
                actionButtonNode.setDisable(fields.stream().anyMatch(f -> f.getText().trim().isEmpty())));
    });

    // If editing, pre-fill fields with existing book information
    if (!isAddOperation) {
        Book selectedBook = Book.findBookByISBN(isbnField.getText());
        if (selectedBook != null) {
            isbnField.setText(selectedBook.getISBN());
            titleField.setText(selectedBook.getTitle());
            authorField.setText(selectedBook.getAuthorName());
            quantityField.setText(Integer.toString(selectedBook.getQuantity()));
            priceField.setText(Double.toString(selectedBook.getPrice()));
            categoryField.setText(selectedBook.getCategory().toString());
            imagePath.setText(selectedBook.getImagePath());
        }
    }
    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == actionButtonType) {
            try {
                String isbn = isbnField.getText();
                String title = titleField.getText();
                String author = authorField.getText();
                int quantity = Integer.parseInt(quantityField.getText());
                double price = Double.parseDouble(priceField.getText());
                String imagePath1 = "file:" + imagePath.getText();
                String categorytxt = categoryField.getText();
                Book.Category category = Book.Category.valueOf(categorytxt.toUpperCase());
                if (isAddOperation) {
                    if (!new Book().isUniqueISBN(isbn)) {
                        alertReference.set(showAlert("ISBN is not unique! Please enter a unique ISBN.", Alert.AlertType.ERROR));
                        return null;
                    }
                    // Call the addBook method in Admin class
                    new Book().AddBook(isbn, title, author, quantity, price, category, imagePath1);
                    alertReference.set(showAlert("Book " + title + " added successfully!", Alert.AlertType.INFORMATION));
                } else {
                    Book editedBook = new Book();
                    editedBook.setISBN(isbn); // Set the ISBN for searching
                    Book existingBook = Book.findBookByISBN(editedBook.getISBN());

                    if (existingBook != null) {
                        // Update only the non-empty fields
                        if (!title.isEmpty()) {
                            existingBook.setTitle(title);
                        }
                        if (!author.isEmpty()) {
                            existingBook.setAuthorName(author);
                        }
                        if (!categorytxt.isEmpty()) {
                            existingBook.setCategory(Book.Category.valueOf(categorytxt.toUpperCase()));
                        }
                        if (!imagePath.getText().isEmpty()) {
                            existingBook.setImagePath(imagePath1);

                        }
                        // Always update quantity and price
                        existingBook.setQuantity(quantity);
                        existingBook.setPrice(price);

                        // Show alert for successful edit
                        alertReference.set(showAlert("Book " + title + " edited successfully!", Alert.AlertType.INFORMATION));
                    } else {
                        alertReference.set(showAlert("Book with ISBN " + isbn + " not found!", Alert.AlertType.ERROR));
                    }
                }
            } catch (NumberFormatException e) {
                alertReference.set(showAlert("Invalid ISBN, quantity, or price!", Alert.AlertType.ERROR));
            } catch (IllegalArgumentException e) {
                alertReference.set(showAlert("Invalid category!", Alert.AlertType.ERROR));
            }
        }
        return null;
    });

    // Don't close the dialog if an alert is shown
    Alert alert = alertReference.get();
    if (alert != null) {
        alert.setOnHidden(event -> dialog.show());
    }
    // to prevent the dialog from closing 
    dialog.setOnCloseRequest(event -> {
        event.consume();
    });

    dialog.showAndWait();
}

//remove book
protected void showRemoveBookDialog() {
    Dialog<Book> dialog = new Dialog<>();
    dialog.setTitle("Remove Book");
    dialog.setHeaderText("Enter ISBN to remove the book:");

    ButtonType removeButton = new ButtonType("Remove", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(removeButton, ButtonType.CANCEL);

    TextField isbnField = new TextField();
    isbnField.setPromptText("ISBN");

    // Enable/Disable remove button depending on whether the ISBN field is filled.
    Node removeButtonNode = dialog.getDialogPane().lookupButton(removeButton);
    removeButtonNode.setDisable(true);

    isbnField.textProperty().addListener((observable, oldValue, newValue) -> {
        removeButtonNode.setDisable(newValue.trim().isEmpty());
    });

    GridPane grid = new GridPane();
    grid.setVgap(15);
    grid.setHgap(5);
    grid.add(new Label("ISBN:"), 0, 0);
    grid.add(isbnField, 1, 0);

    dialog.getDialogPane().setContent(grid);

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == removeButton) {
            String isbn = isbnField.getText();
            if( new Book().removeBook(isbn)) //from class book
              showAlert("Book with ISBN " + isbn + " removed successfully!", Alert.AlertType.INFORMATION);
            else
              showAlert("Book with ISBN " + isbn + " not found!", Alert.AlertType.WARNING);  
        }
        return null;
    });

    dialog.showAndWait();
}

 protected void listBooksByCategoryDialog(Book.Category category) {
    ArrayList<Book> selectedCategoryBooks=Book.selectCategory(category); 
    ArrayList<String> stringRep = new ArrayList<>(); //to call the generic list method
    if (!selectedCategoryBooks.isEmpty()) {  
        for (Book book : selectedCategoryBooks) {
            stringRep.add("ISBN: "+book.getISBN()+"\tTitle:"+book.getTitle()+"\tAuthor: "+book.getAuthorName()+"\tCategory: "+book.getCategory()+
                    "\tPrice: "+book.getPrice()+"\tQuantity: "+book.getQuantity());
        }
    } else {
        showAlert("No books found in the selected category.", Alert.AlertType.INFORMATION);
    }

   showListDialog(stringRep);
}

protected void showBookByCategoryDialog() {
    Dialog<Book.Category> dialog = new Dialog<>();
    dialog.setTitle("Select Category");
    dialog.setHeaderText("Choose a category to list books:");

    ButtonType selectButtonType = new ButtonType("Select", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(selectButtonType, ButtonType.CANCEL);

    ComboBox<Book.Category> categoryComboBox = new ComboBox<>();
    categoryComboBox.getItems().addAll(Book.Category.values());
    categoryComboBox.setPromptText("Select Category");

    GridPane grid = new GridPane();
    grid.add(new Label("Category:"), 0, 0);
    grid.add(categoryComboBox, 1, 0);

    dialog.getDialogPane().setContent(grid);

    Node selectButtonNode = dialog.getDialogPane().lookupButton(selectButtonType);
    selectButtonNode.setDisable(true);

    categoryComboBox.valueProperty().addListener((observable, oldValue, newValue) ->
            selectButtonNode.setDisable(newValue == null));

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == selectButtonType) {
            return categoryComboBox.getValue();
        }
        return null;
    });

    Optional<Book.Category> result = dialog.showAndWait();
    result.ifPresent(category -> listBooksByCategoryDialog(category));
}


protected void showCategoryBookDialog() {
    Dialog<Book> dialog = new Dialog<>();
    dialog.setTitle("Book Cayegory");
    dialog.setHeaderText("Enter ISBN of the book:");

    ButtonType searchButton = new ButtonType("Search", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(searchButton, ButtonType.CANCEL);

    TextField isbnField = new TextField();
    isbnField.setPromptText("ISBN");

    // Enable/Disable remove button depending on whether the ISBN field is filled.
    Node searchButtonNode = dialog.getDialogPane().lookupButton(searchButton);
    searchButtonNode.setDisable(true);

    isbnField.textProperty().addListener((observable, oldValue, newValue) -> {
        searchButtonNode.setDisable(newValue.trim().isEmpty());
    });

    GridPane grid = new GridPane();
    grid.setVgap(15);
    grid.setHgap(5);
    grid.add(new Label("ISBN:"), 0, 0);
    grid.add(isbnField, 1, 0);

    dialog.getDialogPane().setContent(grid);

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == searchButton) {
            String isbn = isbnField.getText();
            Book book=Book.findBookByISBN(isbn);//from class book
            if(book!=null) 
              showAlert("Book with ISBN " + isbn + " belongs to category "+book.getCategory(), Alert.AlertType.INFORMATION);
            else
              showAlert("Book with ISBN " + isbn + " not found!", Alert.AlertType.WARNING);  
        }
        return null;
    });

    dialog.showAndWait();
}

// Declare the spinnerMap to store Spinners for each selected book
private final Map<Book, Spinner<Integer>> spinnerMap = new HashMap<>();

public void showOrderDialog() {
    Dialog<Pair<Supplier, List<Book>>> orderDialog = new Dialog<>();
    orderDialog.initModality(Modality.APPLICATION_MODAL);
    orderDialog.setTitle("Place Order");
    orderDialog.setHeaderText("Choose books and quantity:");

    List<Book> selectedBooks = new ArrayList<>();
    VBox content = new VBox(10);
    content.setPadding(new Insets(10));
    content.setPrefSize(700, 500); 

    TextField supplierNameField = new TextField();
    TextField supplierIdField = new TextField();
    supplierNameField.setPromptText("Supplier Name");
    supplierIdField.setPromptText("Supplier ID");

    ListView<Book> bookListView = new ListView<>();
    bookListView.getItems().addAll(Book.booksList);
    bookListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

    // String representation for each book object
   bookListView.setCellFactory(param -> new ListCell<Book>() {
    @Override
    protected void updateItem(Book book, boolean empty) {
        super.updateItem(book, empty);
        if (empty || book == null) {
            setText(null);
        } else {
            setText(book.toString());
            Spinner<Integer> quantitySpinner = spinnerMap.computeIfAbsent(book, b -> createQuantitySpinner());
            setGraphic(quantitySpinner);
        }
    }
});

    bookListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
        if (newValue != null) {
            Spinner<Integer> quantitySpinner = spinnerMap.computeIfAbsent(newValue, book -> createQuantitySpinner());//create spinner
            content.getChildren().setAll(
                    new Label("Enter Supplier Information:"),
                    new HBox(new Label("Name: "), supplierNameField),
                    new HBox(new Label("ID: "), supplierIdField),
                    new Label("Select books:"),
                    bookListView,
                    new Label("Quantity:"),
                    quantitySpinner
            );
        } else {
            content.getChildren().setAll(
                    new Label("Enter Supplier Information:"),
                    new HBox(new Label("Name: "), supplierNameField),
                    new HBox(new Label("ID: "), supplierIdField),
                    new Label("Select books:"),
                    bookListView
            );
        }
    });

    content.getChildren().addAll(
            new Label("Enter Supplier Information:"),
            new HBox(new Label("Name: "), supplierNameField),
            new HBox(new Label("ID: "), supplierIdField),
            new Label("Select books:"),
            bookListView
    );

    orderDialog.getDialogPane().setContent(content);

    ButtonType placeOrderButtonType = new ButtonType("Place Order", ButtonBar.ButtonData.OK_DONE);
    orderDialog.getDialogPane().getButtonTypes().addAll(placeOrderButtonType, ButtonType.CANCEL);
String supplierName = supplierNameField.getText();
   orderDialog.setResultConverter(dialogButton -> {
        if (dialogButton == placeOrderButtonType) {
            // Get the selected books, their quantities, supplier name, and supplier ID
            selectedBooks.clear();
            int supplierId = Integer.parseInt(supplierIdField.getText());

            for (Book book : bookListView.getSelectionModel().getSelectedItems()) {
                Spinner<Integer> quantitySpinner = spinnerMap.get(book);
                int quantity = quantitySpinner.getValue();

                for (int i = 0; i < quantity; i++) {
                    selectedBooks.add(book);
                }
            }

            // Update the quantity for each book before returning the order information
            for (Book book : selectedBooks) {
                Spinner<Integer> quantitySpinner = spinnerMap.get(book);
                int quantity = quantitySpinner.getValue();
                book.setQuantity(quantity); // Update the quantity for the book
            }

            // Pass the supplier information along with the books
            Pair<Supplier, List<Book>> orderInfo = new Pair<>(new Supplier(supplierName, supplierId), selectedBooks);
            return orderInfo;
        }
        return null;
    });

    Optional<Pair<Supplier, List<Book>>> result = orderDialog.showAndWait();
    result.ifPresent(pair -> {
        Supplier supplierInfo = pair.getKey();
        List<Book> books = pair.getValue();

        System.out.println("Placed Order with the following books:");
        Supplier supplier = new Supplier(supplierInfo.getSname(), supplierInfo.getId());

        for (Book book : books) {
            // placeOrder method in Supplier class
            supplier.placeOrder(Collections.singletonList(book));
        }

        // Update the quantity in the spinnerMap after placing the order
        for (Book book : selectedBooks) {
            Spinner<Integer> quantitySpinner = spinnerMap.get(book);
            quantitySpinner.getValueFactory().setValue(1); // Reset the spinner value
        }
    });
}
private static Spinner<Integer> createQuantitySpinner() {
    Spinner<Integer> quantitySpinner = new Spinner<>(1, 100, 1);
    quantitySpinner.setEditable(true); // to allow manual entry
    quantitySpinner.getValueFactory().setValue(1); // Set initial value to be 1
    return quantitySpinner;
}

    //Alert
    public Alert showAlert(String content, Alert.AlertType alertType) {
    Alert alert = new Alert(alertType);
    alert.setHeaderText(null);
    alert.setContentText(content);
    alert.showAndWait();
    return alert;
    }
}
