/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Dell
 */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonBar;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Dialog;
import javafx.scene.control.DialogPane;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.PasswordField;
import javafx.scene.control.Spinner;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.TextInputDialog;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import javafx.collections.FXCollections;
import javafx.geometry.Pos;
import javafx.scene.control.SpinnerValueFactory;
import javafx.util.Pair;
public class Dialogs {
    // user 
    //add
    protected void showAddUserDialog(User.UserType userType) {
    Dialog<User> dialog = new Dialog<>();
    dialog.setTitle("Add User");
    dialog.setHeaderText("Enter user details:");

    TextField usernameField = new TextField();
    PasswordField passwordField = new PasswordField();

    dialog.getDialogPane().setContent(new VBox(10,
            new Label("Username:"), usernameField,
            new Label("Password:"), passwordField));

    ButtonType addButton = new ButtonType("Add", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(addButton, ButtonType.CANCEL);

    Node addButtonNode = dialog.getDialogPane().lookupButton(addButton);
    addButtonNode.setDisable(true);
    usernameField.textProperty().addListener((observable, oldValue, newValue) -> {
        addButtonNode.setDisable(newValue.trim().isEmpty());
    });

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == addButton) {
            String username = usernameField.getText();
            String password = passwordField.getText();
            new Admin().addUser(username, password, userType);
            showAlert("User added successfully ",Alert.AlertType.INFORMATION);
        }
        return null;
    });
    dialog.showAndWait();
}
//edit
protected void showEditUserDialog() {
    TextInputDialog oldUsernameDialog = new TextInputDialog();
    oldUsernameDialog.setTitle("Edit User");
    oldUsernameDialog.setHeaderText("Enter old username:");
    Optional<String> oldUsernameResult = oldUsernameDialog.showAndWait();

    oldUsernameResult.ifPresent(oldUsername -> {
        // Now, ask for the new username and password
        Dialog<String> dialog = new Dialog<>();
        dialog.setTitle("Edit User");
        dialog.setHeaderText("Enter new username and password:");
        ButtonType editButtonType = new ButtonType("Edit", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(editButtonType, ButtonType.CANCEL);
        TextField newUsernameField = new TextField();
        PasswordField newPasswordField = new PasswordField();
        dialog.getDialogPane().setContent(new VBox(10, new Label("New Username:"), newUsernameField, new Label("New Password:"), newPasswordField));
        Node editButton = dialog.getDialogPane().lookupButton(editButtonType);
        editButton.setDisable(true);
        newUsernameField.textProperty().addListener((observable, oldValue, newValue) -> {
            editButton.setDisable(newValue.trim().isEmpty());
        });
        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == editButtonType) {
                return newUsernameField.getText() + "," + newPasswordField.getText();
            }
            return null;
        });
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(newUserData -> {
            String[] userData = newUserData.split(",");
            String newUsername = userData[0];
            String newPassword = userData[1];
            new Admin().editUser(oldUsername, newUsername, newPassword);
        });
    });
}
    
//remove
protected void showRemoveUserDialog() {
    Dialog<String> dialog = new Dialog<>();
    dialog.setTitle("Remove User");
    dialog.setHeaderText("Enter username:");

    ButtonType removeButtonType = new ButtonType("Remove", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(removeButtonType, ButtonType.CANCEL);

    TextField usernameField = new TextField();
    dialog.getDialogPane().setContent(new VBox(10, new Label("Username:"), usernameField));

    Node removeButton = dialog.getDialogPane().lookupButton(removeButtonType);
    removeButton.setDisable(true);

    usernameField.textProperty().addListener((observable, oldValue, newValue) -> {
        removeButton.setDisable(newValue.trim().isEmpty());
    });

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == removeButtonType) {
            return usernameField.getText();
        }
        return null;
    });

    Optional<String> result = dialog.showAndWait();
    result.ifPresent(username -> {
         new Admin().removeUser(username);
    });
}
    

//list
protected void showListDialog(List<String> list) {
    Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("List Info");
        alert.setHeaderText(null);

        StringBuilder contentText = new StringBuilder();
        for (String item : list) {
            contentText.append(item).append("\n\n");
        }
        // TextArea to enable text wrapping
        TextArea textArea = new TextArea(contentText.toString());
        textArea.setEditable(false);
        textArea.setWrapText(true);

        DialogPane dialogPane = alert.getDialogPane();
        dialogPane.setContent(textArea);
        alert.showAndWait();
}

//add & edit book
protected void showBookDialog(boolean isAddOperation) {

    final AtomicReference<Alert> alertReference = new AtomicReference<>(null); // to still show dialog after any alert

    Dialog<Book> dialog = new Dialog<>();
    dialog.setTitle(isAddOperation ? "Add Book" : "Edit Book");
    dialog.setHeaderText(isAddOperation ? "Enter book details:" : "Enter the ISBN for this book:");

    ButtonType actionButtonType = new ButtonType(isAddOperation ? "Add" : "Edit", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(actionButtonType, ButtonType.CANCEL);

     TextField isbnField = new TextField();
    TextField titleField = new TextField();
    TextField authorField = new TextField();
    TextField quantityField = new TextField();
    TextField priceField = new TextField();
    TextField categoryField = new TextField();
    TextField imagePath = new TextField();
    
    GridPane grid = new GridPane();
    grid.setVgap(15);
    grid.setHgap(5);
    grid.add(new Label("ISBN:"), 0, 0);
    grid.add(isbnField, 1, 0);
    grid.add(new Label("Title:"), 0, 1);
    grid.add(titleField, 1, 1);
    grid.add(new Label("Author:"), 0, 2);
    grid.add(authorField, 1, 2);
    grid.add(new Label("Quantity:"), 0, 3);
    grid.add(quantityField, 1, 3);
    grid.add(new Label("Price:"), 0, 4);
    grid.add(priceField, 1, 4);
    grid.add(new Label("Book image: "), 0, 5);
    grid.add(imagePath, 1, 5);
    grid.add(new Label("Categories:"), 0, 6);
    grid.add(categoryField, 1, 6);
     
    Node actionButtonNode = dialog.getDialogPane().lookupButton(actionButtonType);
    actionButtonNode.setDisable(false);
    dialog.getDialogPane().setContent(grid);

    List<TextField> fields = Arrays.asList(isbnField, quantityField, priceField, categoryField);
    fields.forEach(field -> {
        field.textProperty().addListener((observable, oldValue, newValue) ->
                actionButtonNode.setDisable(fields.stream().anyMatch(f -> f.getText().trim().isEmpty())));
    });

    // If editing, pre-fill fields with existing book information
    if (!isAddOperation) {
        Book selectedBook = Book.findBookByISBN(Book.booksList,isbnField.getText());
        if (selectedBook != null) {
            isbnField.setText(selectedBook.getISBN());
            titleField.setText(selectedBook.getTitle());
            authorField.setText(selectedBook.getAuthorName());
            quantityField.setText(Integer.toString(selectedBook.getQuantity()));
            priceField.setText(Double.toString(selectedBook.getPrice()));
            categoryField.setText(selectedBook.getCategory().toString());
            imagePath.setText(selectedBook.getImagePath());
        }
    }
    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == actionButtonType) {
            try {
                String isbn = isbnField.getText();
                String title = titleField.getText();
                String author = authorField.getText();
                int quantity = Integer.parseInt(quantityField.getText());
                double price = Double.parseDouble(priceField.getText());
                String imagePath1 = "file:" + imagePath.getText();
                String categorytxt = categoryField.getText();
                Book.Category category = Book.Category.valueOf(categorytxt.toUpperCase());
                if (isAddOperation) {
                    if (!new Book().isUniqueISBN(isbn)) {
                        alertReference.set(showAlert("ISBN is not unique! Please enter a unique ISBN.", Alert.AlertType.ERROR));
                        return null;
                    }
                    // Call the addBook method in Admin class
                    new Book().AddBook(isbn, title, author, quantity, price, category, imagePath1);
                    alertReference.set(showAlert("Book " + title + " added successfully!", Alert.AlertType.INFORMATION));
                } else {
                    Book editedBook = new Book();
                    editedBook.setISBN(isbn); // Set the ISBN for searching
                    Book existingBook = Book.findBookByISBN(Book.booksList,editedBook.getISBN());

                    if (existingBook != null) {
                        // Update only the non-empty fields
                        if (!title.isEmpty()) {
                            existingBook.setTitle(title);
                        }
                        if (!author.isEmpty()) {
                            existingBook.setAuthorName(author);
                        }
                        if (!categorytxt.isEmpty()) {
                            existingBook.setCategory(Book.Category.valueOf(categorytxt.toUpperCase()));
                        }
                        if (!imagePath.getText().isEmpty()) {
                            existingBook.setImagePath(imagePath1);

                        }
                        // Always update quantity and price
                        existingBook.setQuantity(quantity);
                        existingBook.setPrice(price);

                        // Show alert for successful edit
                        alertReference.set(showAlert("Book " + title + " edited successfully!", Alert.AlertType.INFORMATION));
                    } else {
                        alertReference.set(showAlert("Book with ISBN " + isbn + " not found!", Alert.AlertType.ERROR));
                    }
                }
            } catch (NumberFormatException e) {
                alertReference.set(showAlert("Invalid ISBN, quantity, or price!", Alert.AlertType.ERROR));
            } catch (IllegalArgumentException e) {
                alertReference.set(showAlert("Invalid category!", Alert.AlertType.ERROR));
            }
        }
        return null;
    });

    // Don't close the dialog if an alert is shown
    Alert alert = alertReference.get();
    if (alert != null) {
        alert.setOnHidden(event -> dialog.show());
    }
    // to prevent the dialog from closing 
    dialog.setOnCloseRequest(event -> {
        event.consume();
    });

    dialog.showAndWait();
}

//remove book
protected void showRemoveBookDialog() {
    Dialog<Book> dialog = new Dialog<>();
    dialog.setTitle("Remove Book");
    dialog.setHeaderText("Enter ISBN to remove the book:");

    ButtonType removeButton = new ButtonType("Remove", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(removeButton, ButtonType.CANCEL);

    TextField isbnField = new TextField();
    isbnField.setPromptText("ISBN");

    // Enable/Disable remove button depending on whether the ISBN field is filled.
    Node removeButtonNode = dialog.getDialogPane().lookupButton(removeButton);
    removeButtonNode.setDisable(true);

    isbnField.textProperty().addListener((observable, oldValue, newValue) -> {
        removeButtonNode.setDisable(newValue.trim().isEmpty());
    });

    GridPane grid = new GridPane();
    grid.setVgap(15);
    grid.setHgap(5);
    grid.add(new Label("ISBN:"), 0, 0);
    grid.add(isbnField, 1, 0);

    dialog.getDialogPane().setContent(grid);

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == removeButton) {
            String isbn = isbnField.getText();
            if( new Book().removeBook(isbn)) //from class book
              showAlert("Book with ISBN " + isbn + " removed successfully!", Alert.AlertType.INFORMATION);
            else
              showAlert("Book with ISBN " + isbn + " not found!", Alert.AlertType.WARNING);  
        }
        return null;
    });

    dialog.showAndWait();
}

 protected void listBooksByCategoryDialog(Book.Category category) {
    ArrayList<Book> selectedCategoryBooks=Book.selectCategory(category); 
    ArrayList<String> stringRep = new ArrayList<>(); //to call the generic list method
    if (!selectedCategoryBooks.isEmpty()) {  
        for (Book book : selectedCategoryBooks) {
            stringRep.add("ISBN: "+book.getISBN()+"\tTitle:"+book.getTitle()+"\tAuthor: "+book.getAuthorName()+"\tCategory: "+book.getCategory()+
                    "\tPrice: "+book.getPrice()+"\tQuantity: "+book.getQuantity());
        }
    } else {
        showAlert("No books found in the selected category.", Alert.AlertType.INFORMATION);
    }

   showListDialog(stringRep);
}

protected void showBookByCategoryDialog() {
    Dialog<Book.Category> dialog = new Dialog<>();
    dialog.setTitle("Select Category");
    dialog.setHeaderText("Choose a category to list books:");

    ButtonType selectButtonType = new ButtonType("Select", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(selectButtonType, ButtonType.CANCEL);

    ComboBox<Book.Category> categoryComboBox = new ComboBox<>();
    categoryComboBox.getItems().addAll(Book.Category.values());
    categoryComboBox.setPromptText("Select Category");

    GridPane grid = new GridPane();
    grid.add(new Label("Category:"), 0, 0);
    grid.add(categoryComboBox, 1, 0);

    dialog.getDialogPane().setContent(grid);

    Node selectButtonNode = dialog.getDialogPane().lookupButton(selectButtonType);
    selectButtonNode.setDisable(true);

    categoryComboBox.valueProperty().addListener((observable, oldValue, newValue) ->
            selectButtonNode.setDisable(newValue == null));

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == selectButtonType) {
            return categoryComboBox.getValue();
        }
        return null;
    });

    Optional<Book.Category> result = dialog.showAndWait();
    result.ifPresent(category -> listBooksByCategoryDialog(category));
}


protected void showCategoryBookDialog() {
    Dialog<Book> dialog = new Dialog<>();
    dialog.setTitle("Book Cayegory");
    dialog.setHeaderText("Enter ISBN of the book:");

    ButtonType searchButton = new ButtonType("Search", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(searchButton, ButtonType.CANCEL);

    TextField isbnField = new TextField();
    isbnField.setPromptText("ISBN");

    // Enable/Disable remove button depending on whether the ISBN field is filled.
    Node searchButtonNode = dialog.getDialogPane().lookupButton(searchButton);
    searchButtonNode.setDisable(true);

    isbnField.textProperty().addListener((observable, oldValue, newValue) -> {
        searchButtonNode.setDisable(newValue.trim().isEmpty());
    });

    GridPane grid = new GridPane();
    grid.setVgap(15);
    grid.setHgap(5);
    grid.add(new Label("ISBN:"), 0, 0);
    grid.add(isbnField, 1, 0);

    dialog.getDialogPane().setContent(grid);

    dialog.setResultConverter(dialogButton -> {
        if (dialogButton == searchButton) {
            String isbn = isbnField.getText();
            Book book=Book.findBookByISBN(Book.booksList,isbn);//from class book
            if(book!=null) 
              showAlert("Book with ISBN " + isbn + " belongs to category "+book.getCategory(), Alert.AlertType.INFORMATION);
            else
              showAlert("Book with ISBN " + isbn + " not found!", Alert.AlertType.WARNING);  
        }
        return null;
    });

    dialog.showAndWait();
}

// make order dialog
public void showOrderDialog(List<Supplier> suppliers) {
    Dialog<Pair<Supplier, List<Book>>> orderDialog = new Dialog<>();
    orderDialog.setTitle("Place Order");

    final List<Book> booksList = Book.booksList;
    GridPane gridPane = new GridPane();
    gridPane.setAlignment(Pos.CENTER);
    gridPane.setHgap(10);
    gridPane.setVgap(10);
    gridPane.setPadding(new Insets(25, 25, 25, 25));

    // Create the supplier name field
    Label supplierNameLabel = new Label("Supplier Name:");
    TextField supplierNameField = new TextField();
    gridPane.add(supplierNameLabel, 0, 0);
    gridPane.add(supplierNameField, 1, 0);

    // Create the supplier ID field
    Label supplierIdLabel = new Label("Supplier ID:");
    TextField supplierIdField = new TextField();
    gridPane.add(supplierIdLabel, 0, 1);
    gridPane.add(supplierIdField, 1, 1);

    // Create the books list and quantity spinners
    Label booksLabel = new Label("Books:");
    ListView<Book> booksListView = new ListView<>();
    booksListView.setPrefSize(500, 300);
    booksListView.setItems(FXCollections.observableArrayList(booksList));
    gridPane.add(booksLabel, 0, 2);
    gridPane.add(booksListView, 1, 2);
    List<Spinner<Integer>> quantitySpinners = new ArrayList<>();
    VBox root=new VBox();
    for (int i = 0; i < booksList.size(); i++) {
    Book book = booksList.get(i);
    Spinner<Integer> spinner = createQuantitySpinner(book);
    quantitySpinners.add(spinner);
    root.getChildren().add(spinner);  
}
    gridPane.add(root, 2, 2);

    Button placeOrderButton = new Button("Place Order");
    placeOrderButton.setOnAction(event -> {
        Supplier existingSupplier = null;
        for (Supplier supplier : suppliers) {
            if (supplier.getSname().equals(supplierNameField.getText()) && supplier.getId().equals(supplierIdField.getText())) {
                existingSupplier = supplier;
                break;
            }
        }

        if (existingSupplier != null) {
            Order order = new Order(existingSupplier, booksList);
            double orderTotal = order.calculatePrice(booksList);
            double revenue = existingSupplier.getRevenue();
            existingSupplier.setRevenue(revenue + orderTotal);

            placeOrder(existingSupplier, booksList, quantitySpinners);
        } else {
            showAlert("Supplier NOT found in Suppliers list", Alert.AlertType.ERROR);
        }
    });

    // Create the "Cancel" button
    Button cancelButton = new Button("Cancel");
    cancelButton.setOnAction(event -> {
        orderDialog.close(); // Close the dialog without placing the order
    });
    orderDialog.getDialogPane().getButtonTypes().add( ButtonType.CANCEL);
    gridPane.add(placeOrderButton, 1, 3 + booksList.size());
    gridPane.add(cancelButton, 2, 3 + booksList.size());
    orderDialog.getDialogPane().setContent(gridPane);
    orderDialog.getDialogPane().setMinHeight(700);
    orderDialog.getDialogPane().setMinWidth(1000);
    orderDialog.showAndWait();
}

private Spinner<Integer> createQuantitySpinner(Book book) {
        Spinner<Integer> spinner = new Spinner<>(0, Integer.MAX_VALUE, 0);
        spinner.setEditable(true);
        SpinnerValueFactory.IntegerSpinnerValueFactory valueFactory =
                new SpinnerValueFactory.IntegerSpinnerValueFactory(0, Integer.MAX_VALUE, book.getQuantity());
        spinner.setValueFactory(valueFactory);
        return spinner;
}

private void placeOrder(Supplier sup,List<Book>booksList,List<Spinner<Integer>> quantitySpinners) {
        List<Book> selectedBooks = new ArrayList<>();
        for (int i = 0; i < booksList.size(); i++) {
        Book book = booksList.get(i);
        int quantity = quantitySpinners.get(i).getValue();
        book.setQuantity(quantity);
        selectedBooks.add(book);
    }

        // Invoke the placeOrder method to update the quantities 
        sup.placeOrder(selectedBooks);
        showAlert("order placed successfully",Alert.AlertType.INFORMATION);
    }
    
    //No of borrows
protected void showNoBorrowsDialog(String startDateField, String endDateField) {
    Dialog<String> secondDialog = new Dialog<>();
    secondDialog.setTitle("Result Dialog");
    secondDialog.setHeaderText("This is the result of the search:");

    String startDate = startDateField;
    String endDate = endDateField;
    int numberOfBorrows = Borrowing.NoOfBorrowsInPeriod(startDate, endDate);

    Label resultLabel = new Label("Number of borrows in the specified period: " + numberOfBorrows);
    secondDialog.getDialogPane().setContent(new VBox(10, resultLabel));

    ButtonType closeButton = new ButtonType("Close", ButtonBar.ButtonData.OK_DONE);
    secondDialog.getDialogPane().getButtonTypes().add(closeButton);

    secondDialog.setResultConverter(dialogButton -> {
        if (dialogButton == closeButton) {
            return null;
        }
        return null;
    });

    secondDialog.showAndWait();
}

protected void showTotal_avgDialog(String startDateField, String endDateField, boolean isTotal) {
    Dialog<String> dialog = new Dialog<>();
    ButtonType closeButton = new ButtonType("Close", ButtonBar.ButtonData.CANCEL_CLOSE);
    dialog.getDialogPane().getButtonTypes().addAll(closeButton);

    VBox content = new VBox();
    content.setSpacing(10); 
        StringBuilder s=new StringBuilder();
        if (isTotal) {// for total
            dialog.setTitle("Total Borrowing Revenue");
            double total= Borrowing.totalBorrowingRevInPeriod(startDateField, endDateField);
            s.append("Total Borrowings Revenue in this peroid: ");
            s.append(total);
            
        } else {// fro average
            dialog.setTitle("Average Borrowing Revenue");
            double average=Borrowing.averageBorrowingRevenueInPeriod(startDateField, endDateField);
            s.append("Average Borrowings Revenue in this peroid: ");
            s.append(average);
        }
    s.append("$");
    Label countLabel = new Label(s.toString());
    content.getChildren().add(countLabel);
    dialog.getDialogPane().setContent(content);
    dialog.showAndWait();
 
}

public void maxUserBorrowingsDialog(User user)
{
    Dialog dialog= new Dialog<>();
    ButtonType closeButton = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(closeButton);
    if(user instanceof Librarian ){
    dialog.setTitle("Max Librarian Borrowings ");
    Librarian librarian=Borrowing.maxLibrarianBorrowings();
    dialog.setContentText("The llibrarian with max borrowings is: "+librarian.getUserName());
    }
    else if(user instanceof Borrower)
    {
        dialog.setTitle("Max Borrower Borrowings: ");
        Borrower borrower=Borrowing.maxBorrowerBorrowings();
        dialog.setContentText("The borrower with max borrowings is: "+borrower.getUserName());
    }
    dialog.showAndWait();
}

public void maxUserRevenueDialog(User user)
{
    Dialog dialog= new Dialog<>();
    ButtonType closeButton = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
    dialog.getDialogPane().getButtonTypes().addAll(closeButton);
    if(user instanceof Librarian ){
    dialog.setTitle("Max Librarian Revenue");
    
    Map<String, Double> librarianRevenueMap = Borrowing.getLibrarianRevenueMap();
        dialog.setContentText("The librarian with max revenue is: \n"+librarianRevenueMap);
    
    }
    else if(user instanceof Borrower)
    {
        dialog.setTitle("Max Borrower Revenue");
        Map<String, Double> borrowerRevenueMap = Borrowing.getBorrowerRevenueMap();
    dialog.setContentText("The borrower with max revenue is: \n"+borrowerRevenueMap);
    }
    dialog.getDialogPane().setMinHeight(600);
    dialog.getDialogPane().setMinWidth(800);
    dialog.showAndWait();
}

    //Alert
public static Alert showAlert(String content, Alert.AlertType alertType) {
    Alert alert = new Alert(alertType);
    alert.setHeaderText(null);
    alert.setContentText(content);
    alert.showAndWait();
    return alert;
    }
}
