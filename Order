import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class Order implements Serializable {
    public static final long serialVersionUID = -4893757831676801882L;

    public static List<Order> ordersList = new ArrayList<>();

    private int orderNum;
    private Supplier supplier= new Supplier();
    private List<Book> booklist;
    private double totalPrice;
    private int totalAmountInOrder; // no. of books in the order

    public Order(Supplier supplier, List<Book> booklist) {
        this.supplier=supplier;
        this.orderNum = getNextOrderNum();
        this.booklist = new ArrayList<>(booklist);
        this.totalPrice = calculatePrice(booklist);
        this.totalAmountInOrder = booklist.size();
        ordersList.add(this); 
    }
    private int getNextOrderNum() {
        if (ordersList.isEmpty()) {
            return 1; // If the list is empty, start with order number 1
        } else {
            Order lastOrder = ordersList.get(ordersList.size() - 1);
            return lastOrder.getOrderNum() + 1;
        }
    }

    public int getOrderNum() {
        return orderNum;
    }

    
    public List<Book> getBooklist() {
        return booklist;
    }

    public void setBooklist(List<Book> booklist) {
        this.booklist = booklist;
    }

    public double getTotalPrice() {
        return totalPrice;
    }

    public void setTotalPrice(double totalPrice) {
        this.totalPrice = totalPrice;
    }

    public int getTotalAmountInOrder() {
        return totalAmountInOrder;
    }

    public void setTotalAmountOfOrders(int totalAmountOfOrders) {
        this.totalAmountInOrder = totalAmountOfOrders;
    }

    public void addToOrder(List<Book> books) {
        for (Book book : books) {
            booklist.add(book);
            totalPrice += book.getPrice();
            totalAmountInOrder++;
        }
    }

    public void editOrder(int orderIndex, Book newBook) {
        if (orderIndex >= 0 && orderIndex < booklist.size()) {
            Book oldBook = booklist.get(orderIndex);
            totalPrice -= oldBook.getPrice();
            totalPrice += newBook.getPrice();
            booklist.set(orderIndex, newBook);
        }
    }

    public void cancelOrder(int orderIndex) {
        if (orderIndex >= 0 && orderIndex < booklist.size()) {
            Book canceledBook = booklist.remove(orderIndex);
            totalAmountInOrder--;
            totalPrice -= canceledBook.getPrice();
        }
    }

 public double calculatePrice(List<Book> booklist) {
    double total = 0.0;
    for (Book book : booklist) {
        double bookPrice = book.getPrice();
        int bookQuantity = book.getQuantity();
        if (bookPrice >= 0.0 && bookQuantity >= 0)
        total += bookPrice * bookQuantity;
  }
    return total;
}
}
