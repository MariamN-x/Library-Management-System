
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Dell
 */
public class Supplier implements Serializable {
    private static final long serialVersionUID = 2794085879252401738L;
    
    public static List<Supplier>suppliersList=new ArrayList<>();
    private String sname; 
    private int id ;
    private List<Order>ordersList;
    
     public Supplier(){}
    public Supplier(String sname, int id) {
        this.sname = sname;
        this.id = id;
        ordersList = new ArrayList<>();
    }

    public String getSname() {
        return sname;
    }

    public void setSname(String sname) {
        this.sname = sname;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public List<Order> getOrderlist() {
        return ordersList;
    }

    public void setOrdersList(List<Order> ordersList) {
        this.ordersList = ordersList;
    }

    
public int numberOfOrders() {
        return ordersList.size();
    }


public void placeOrder(List<Book> books) {
        Order newOrder = new Order(sname, books);
        this.ordersList.add(newOrder);
        // add books to the library & update quantity
        for (Book book : books) { 
            Book oldBook=Book.findBookByISBN(book.getISBN());
            if(oldBook!=null) //book found in the library
            {
                int currentQuantity=book.getQuantity();
                int oldQuantity=oldBook.getQuantity();
                if(currentQuantity>0)
                {
                    oldBook.setQuantity(oldQuantity+currentQuantity);
                }
                book.setQuantity(0);//all the books in the order have been accounted for in the library
            }
            else{ //book not found in the library ->add it
            Book.booksList.add(book);
            book.setQuantity(0);//all the books in the order have been accounted for in the library
            }
        }
} 

public double totalRevenue() {
        double revenue = 0.0;
        for (Order order : ordersList) {
            revenue += order.calculatePrice();
        }
        return revenue;
    }

public Supplier maxOrderSupplier() {
        Supplier maxOrderSupplier = null;
        int maxOrders = 0;
        for (Supplier supplier : suppliersList) {
            int orders = supplier.numberOfOrders();
            if (orders > maxOrders) {
                maxOrders = orders;
                maxOrderSupplier = supplier;
            }
        }
        return maxOrderSupplier;
}
    
public Supplier minOrderSupplier() {
    Supplier minOrderSupplier = null;
    int minOrders = Integer.MAX_VALUE;
    for (Supplier supplier : suppliersList) {
        int orders = supplier.numberOfOrders();
        if (orders < minOrders) {
            minOrders = orders;
            minOrderSupplier = supplier;
        }
    }
    return minOrderSupplier;
}

public Supplier maxRevenueSupplier() {
        Supplier maxRevenueSupplier = null;
        double maxRevenue = 0.0;
        for (Supplier supplier : suppliersList) {
            double revenue = supplier.totalRevenue();
            if (revenue > maxRevenue) {
                maxRevenue = revenue;
                maxRevenueSupplier = supplier;
            }
        }
        return maxRevenueSupplier;
}
      
public Supplier minRevenueSupplier() {
    Supplier minRevenueSupplier = null;
    double minRevenue = Double.MAX_VALUE;
    for (Supplier supplier : suppliersList) {
        double revenue = supplier.totalRevenue();
        if (revenue < minRevenue) {
            minRevenue = revenue;
            minRevenueSupplier = supplier;
        }
    }
    return minRevenueSupplier;
}
public List<String> displayOrdersDetails() {
        List<String> detailsList = new ArrayList<>();
        detailsList.add("Orders details for Supplier: " + sname);
        for (Order order : ordersList) {
            detailsList.add("Order Number: " + order.getOrderNum());
            detailsList.add("User: " + order.getsupplierName());
            detailsList.add("Total Amount of Orders: " + order.getTotalAmountOfOrders());
            detailsList.add("Total Price of the order: $" + order.getTotalPrice());

            detailsList.add("Books in Order:");
            List<Book> books = order.getBooklist();
            for (int i = 0; i < books.size(); i++) {
                Book book = books.get(i);
                detailsList.add("Book " + (i + 1));
                detailsList.add("Title: " + book.getTitle());
                detailsList.add("Author: " + book.getAuthorName());
                detailsList.add("Price: $" + book.getPrice());
                detailsList.add("\n");
            }
        }

        return detailsList;
}

public static List<String> displayAllOrdersDetails(List<Supplier> suppliers) {
        List<String> allDetailsList = new ArrayList<>();
        for (Supplier supplier : suppliers) {
            List<String> supplierDetails = supplier.displayOrdersDetails();
            allDetailsList.addAll(supplierDetails);
        }
        return allDetailsList;
    }
}
