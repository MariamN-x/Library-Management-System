
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class Supplier implements Serializable {
    private static final long serialVersionUID = 2794085879252401738L;
    
    public static List<Supplier>suppliersList=new ArrayList<>();
    private String sname; 
    private String id ;
    private double revenue;
    private List<Order>ordersList;
    
     public Supplier(){}
    public Supplier(String sname, String id) {
        this.sname = sname;
        this.id = id;
        this.revenue=0.0;
        ordersList = new ArrayList<>();
    }

    public String getSname() {
        return sname;
    }

    public void setSname(String sname) {
        this.sname = sname;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public double getRevenue() {
        return revenue;
    }

    public void setRevenue(double revenue) {
        this.revenue = revenue;
    }

    public List<Order> getOrderlist() {
        return ordersList;
    }

    public void setOrdersList(List<Order> ordersList) {
        this.ordersList = ordersList;
    }

    
public int numberOfOrders() {
        return ordersList.size();
    }
@Override
public String toString()
{
    return"Supplier name: "+getSname()+", supplier id: "+getId();
}

public void placeOrder(List<Book> books) {
        Order newOrder = new Order(this, books);
        this.ordersList.add(newOrder);
        // add books to the library & update quantity (if already exists)
        for (Book book : books) {
            Book existingBook = Book.findBookByISBN(Book.booksList,book.getISBN());
            if (existingBook != null) {
                int currentQuantity = existingBook.getQuantity();
                int updatedQuantity = currentQuantity + book.getQuantity();
                existingBook.setQuantity(updatedQuantity);
            } else {
                Book.booksList.add(book);
            }
        }
        
}

public double totalRevenue() {
        double totalRevenue = 0.0;
        for (Order order : ordersList) {
            totalRevenue += order.getTotalPrice();
        }
        return totalRevenue;
    }

public static List<Supplier> maxOrderSupplier() {
        List<Supplier> maxOrderSuppliers = new ArrayList<>();
        int maxOrders = 0;

        for (Supplier supplier : suppliersList) {
            int supplierOrders = supplier.numberOfOrders();
            
            if (supplierOrders > maxOrders) {
                maxOrders = supplierOrders;
                maxOrderSuppliers.clear(); // Clear previous max suppliers
                maxOrderSuppliers.add(supplier);
            } else if (supplierOrders == maxOrders) {
                maxOrderSuppliers.add(supplier); // Add another supplier with the same orders
            }
        }

        return maxOrderSuppliers;
}
public static List<Supplier> maxRevenueSupplier() {
        List<Supplier> maxRevenueSuppliers = new ArrayList<>();
        double maxRevenue = 0.0;
        for (Supplier supplier : suppliersList) {
            double supplierRevenue = supplier.totalRevenue();
            
            if (supplierRevenue > maxRevenue) {
                maxRevenue = supplierRevenue;
                maxRevenueSuppliers.clear();
                maxRevenueSuppliers.add(supplier);
            } else if (supplierRevenue == maxRevenue) {
                maxRevenueSuppliers.add(supplier);
            }
        }

        return maxRevenueSuppliers;
    }
public List<String> displayOrderDetails() {
        List<String> detailsList = new ArrayList<>();
        detailsList.add("Orders details for Supplier: " + this.sname);
        for (Order order : ordersList) {
            detailsList.add("Order Number: " + order.getOrderNum());
            detailsList.add("Total Amount of Orders: " + order.getTotalAmountInOrder());
            detailsList.add("Total Price of the order: $" + order.getTotalPrice());

            detailsList.add("Books in Order:");
            List<Book> books = order.getBooklist();
            for (int i = 0; i < books.size(); i++) {
                Book book = books.get(i);
                detailsList.add("Book " + (i + 1));
                detailsList.add("Title: " + book.getTitle());
                detailsList.add("Author: " + book.getAuthorName());
                detailsList.add("Price: $" + book.getPrice());
                detailsList.add("\n");
            }
        }

        return detailsList;
}

public static List<String> displayAllOrdersDetails(List<Supplier> suppliers) {
        List<String> allDetailsList = new ArrayList<>();
        for (Supplier supplier : suppliers) {
            List<String> supplierDetails = supplier.displayOrderDetails();
            allDetailsList.addAll(supplierDetails);
        }
        return allDetailsList;
    }
}
