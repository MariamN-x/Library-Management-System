
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;


public class Borrower extends User {
    
    public ArrayList<Borrower> borrowers = new ArrayList<>();
    public ArrayList<Borrowing> borrowings;
    public HashMap<Book, Integer> lostBooks;
    
    public Borrower(String username,String pass){
        super.setUserName(username);
        super.setPassword (pass);
        borrowings = new ArrayList<>();
        lostBooks = new HashMap<>();
       
      }

    public String getUserName() {
       return super.getUserName();
    }

    public void setUserName(String UserName) {
       super.setUserName(UserName); 
    }

    public String getPassword() {
        return super.getPassword();
    }

    public void setPassword(String Password) {
         super.setPassword (Password);
    }
    
    
    
    
       public void viewBorrowingDetails() {
        for (Borrowing borrowing : borrowings) {
            System.out.println("Start Date: " + borrowing.getStartDate());
            System.out.println("End Date: " + borrowing.getEndDate());
            System.out.println("Books Borrowed:");
            for (Book book : borrowing.getBooks()) {
                System.out.println("- " + book.getTitle());
            }
            System.out.println();
        }
    }

//    public void rateBook(Book book, double rating) {
//        for (Borrowing borrowing : borrowings) {
//            if (borrowing.getBooks().contains(book)) {
//                borrowing.addRating(book, rating);
//                break;
//            }
//        }
//    }

    public double calculateTotalPayment() {
        double totalPayment = 0.0;
        for (Borrowing borrowing : borrowings) {
            totalPayment += borrowing.getPayment();
        }
        return totalPayment;
    }

    public int getLostBookCount() {
        int lostBookCount = 0;
        for (Map.Entry<Book, Integer> entry : lostBooks.entrySet()) {
            lostBookCount += entry.getValue();
        }
        return lostBookCount;
    }

    public int getBorrowedBookCount() {
        int borrowedBookCount = 0;
        for (Borrowing borrowing : borrowings) {
           // borrowedBookCount += borrowing.getBook().size();
        }
        return borrowedBookCount;
    }

}
