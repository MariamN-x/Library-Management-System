
import java.io.Serializable;
import java.util.ArrayList;   
import java.util.Date;
import java.util.List;


public class Borrower extends User implements Serializable {
    private static final long serialVersionUID = 7658793135987417738L;
    protected  List<Book> borrowedBooksperBorrower;
    protected  List<Borrowing>borrowingsPerBorrower; 
    
    public Borrower(){}
    public Borrower(String username,String pass){
        super.setUserName(username);
        super.setPassword (pass);
        borrowedBooksperBorrower=new ArrayList<>();
    }
 
    @Override
    public String getUserName() {
        return super.getUserName();
    }

    @Override
    public void setUserName(String userName) {
        super.setUserName(userName);
    }

    @Override
    public String getPassword() {
        return super.getPassword();
    }

    @Override
    public void setPassword(String password) {
        super.setPassword(password);
    }

    public void setBorrowedBooksperBorrower(List<Book> borrowedBooksperBorrower) {
        this.borrowedBooksperBorrower = borrowedBooksperBorrower;
    }

    public void setBorrowingsPerBorrower(List<Borrowing> borrowingsPerBorrower) {
        this.borrowingsPerBorrower = borrowingsPerBorrower;
    }

    public List<Book> getBorrowedBooksperBorrower() {
        return borrowedBooksperBorrower;
    }
    public List<Borrowing> getBorrowingsPerBorrower() {
        return borrowingsPerBorrower;
    }
//mariam's methods
// public Borrower findBorrowerByName(String name) {
//        for (Borrower borrower : borrowers) {
//            if (borrower.getName().equals(name)) {
//                return borrower;
//            }
//        }
//        return null;
//    }
//public void returnBook(String borrowerName, String bookTitle) {
//        Borrower borrower = findBorrowerByName(borrowerName);
//        Book book = findBookByTitle(bookTitle);
//
//        if (borrower != null && book != null && !book.isAvailability()) {
//            borrower.returnBook(book);
//            System.out.println("BOOK RETURNED SUCCESSFULLY , THANKS ");
//        } else {
//            System.out.println("NOT VALID BOOK TO BE RETURNED ");
//        }
//    }
//public void checkOutBook(String borrowerName, String bookTitle) {
//        Borrower borrower = findBorrowerByName(borrowerName);
//        Book book = findBookByTitle(bookTitle);
//
//        if (borrower != null && book != null && book.isAvailability()) {
//            borrower.borrowBook(book);
//            System.out.println(" BOOK AVAILABLE, HAVE A NICE READDING ");
//        } else {
//            System.out.println(" Book is not available.");
//        }
//    }
//    
//    public void printAllBooks() {
//        for (Book book : Book.booksList) {
//            System.out.println(book.getTitle() + " | " + book.getAuthor() + " | " + book.getPrice() + " | " + (book.isAvailability() ? "Available" : "Checked Out"));
//        }
//    }
//    public void printAvailableBooks() {
//        for (Book book : Book.booksList) {
//            if (book.isAvailability()) {
//                System.out.println(book.getTitle() + " | " + book.getAuthor() + " | " + book.getPrice());
//            }
//        }
//    }
//   
   
    public List<String> viewBorrowingDetails() {
        List<String>str=new ArrayList<>();
        for (Borrowing borrowing : Borrowing.borrowingsList) {
            Date startDate=borrowing.getStartDate();
            str.add("Start Date: " + startDate);
            str.add("End Date: " + borrowing.getEndDate(startDate));
            str.add("Borrowed Books: "+borrowedBooksperBorrower.toString());
           
        }
        return str;
    }

//    public void rateBook(Book book, double rating) {
//        for (Borrowing borrowing : borrowings) {
//            if (borrowing.getBooks().contains(book)) {
//                borrowing.addRating(book, rating);
//                break;
//            }
//        }
//    }

    public double calculateTotalPayment() {
        double totalPayment = 0.0;
        for (Borrowing borrowing :Borrowing.borrowingsList) {
            totalPayment += borrowing.getPayment();
        }
        return totalPayment;
    }

@Override
      public String toString()
      {
          return"Username: "+getUserName()+"\tpassword: "+getPassword();
      }
}

